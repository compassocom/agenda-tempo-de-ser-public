na pasta Pages:

AccessDeniedPage
import React from 'react';
import { User } from '@/entities';
import { Button } from '../components/ui/button';
import { ShieldAlert } from 'lucide-react';

export default function AccessDeniedPage() {
  const handleLogout = async () => {
    await User.logout();
    window.location.href = '/login'; // Redireciona para a página de login
  };

  return (
    <div className="flex items-center justify-center min-h-screen bg-stone-50 dark:bg-black text-center p-6">
      <div className="w-full max-w-md p-8 space-y-6 bg-white dark:bg-black shadow-lg rounded-xl">
        <ShieldAlert className="w-16 h-16 mx-auto text-amber-500" />
        <h1 className="text-2xl font-bold text-stone-900 dark:text-stone-100">Acesso Restrito</h1>
        <p className="text-stone-600 dark:text-stone-100">
          O seu email não está na lista de utilizadores autorizados. Se acredita que isto é um erro, por favor, contacte o administrador.
        </p>
        <Button onClick={handleLogout} variant="outline" className="w-full">
          Voltar para o Login
        </Button>
      </div>
    </div>
  );
}



DailyPage
import React, { useState, useEffect, ReactNode } from "react";
import toast from 'react-hot-toast';
import { Sun, Moon, ChevronLeft, ChevronRight, ArrowRight, CheckCircle, Plus, Target, Loader2, Save } from "lucide-react";
import { Link } from "react-router-dom";
// --- IMPORTAÇÃO REAL DO SUPABASE ---
import { DailyPage, WeeklyPlanning, User } from "../entities/index";

// --- INÍCIO DOS COMPONENTES DE UI (MANTIDOS LOCALMENTE PARA ESTABILIDADE VISUAL) ---
const Button = ({ children, className = '', variant, size, ...props }: React.ButtonHTMLAttributes<HTMLButtonElement> & { variant?: string, size?: string }) => ( <button className={`inline-flex items-center justify-center rounded-md text-sm font-medium transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-stone-600 disabled:opacity-50 ${variant === 'outline' ? 'border border-stone-300 bg-transparent hover:bg-stone-100 hover:text-stone-800 dark:border-gray-600 dark:text-stone-300 dark:hover:bg-gray-700 dark:hover:text-stone-200' : 'bg-stone-800 text-white hover:bg-stone-900 dark:bg-stone-100 dark:text-stone-900 dark:hover:bg-stone-200'} ${size === 'icon' ? 'h-10 w-10' : 'h-10 px-4 py-2'} ${size === 'lg' ? 'h-11 px-6 text-base' : ''} ${className}`} {...props}>{children}</button> );
const Card = ({ children, className = '' }: { children: ReactNode, className?: string }) => <div className={`bg-white rounded-lg shadow-sm border border-stone-200 dark:bg-gray-800 dark:border-gray-700 ${className}`}>{children}</div>;
const CardHeader = ({ children, className = '' }: { children: ReactNode, className?: string }) => <div className={`p-6 border-b border-stone-200 dark:border-gray-700 flex items-center justify-between ${className}`}>{children}</div>;
const CardTitle = ({ children, className = '' }: { children: ReactNode, className?: string }) => <h3 className={`text-xl font-semibold text-stone-800 dark:text-stone-100 ${className}`}>{children}</h3>;
const CardContent = ({ children, className = '' }: { children: ReactNode, className?: string }) => <div className={`p-6 ${className}`}>{children}</div>;
const Input = (props: React.InputHTMLAttributes<HTMLInputElement>) => <input className="flex h-10 w-full rounded-md border border-stone-300 bg-transparent px-3 py-2 text-sm text-stone-900 placeholder:text-stone-500 focus-visible:outline-none focus-visible:ring-2 dark:border-gray-600 dark:bg-gray-700 dark:text-stone-200 dark:placeholder:text-gray-400" {...props} />;
const Textarea = (props: React.TextareaHTMLAttributes<HTMLTextAreaElement>) => <textarea className={`flex min-h-[80px] w-full rounded-md border border-stone-300 bg-transparent px-3 py-2 text-sm text-stone-900 placeholder:text-stone-500 focus-visible:outline-none focus-visible:ring-2 dark:border-gray-600 dark:bg-gray-700 dark:text-stone-200 dark:placeholder:text-gray-400 ${props.className}`} {...props} />;
const createPageUrl = (path: string) => `/${path}`;
const SectionSaveButton = ({ onSave }: { onSave: () => Promise<void> }) => { const [isSaving, setIsSaving] = useState(false); const handleClick = async () => { setIsSaving(true); try { await onSave(); } catch (e) {} setIsSaving(false); }; return <Button size="icon" variant="ghost" className="dark:text-stone-300 dark:hover:bg-gray-700" onClick={handleClick} disabled={isSaving}>{isSaving ? <Loader2 className="w-4 h-4 animate-spin" /> : <Save className="w-4 h-4" />}</Button>; };
const generateTimeSlots = (start: number, end: number) => { const slots = []; for (let i = start; i < end; i += 0.5) { const h = Math.floor(i); const m = i % 1 === 0 ? '00' : '30'; slots.push(`${h}:${m}`); } return slots; };
const morningSlots = generateTimeSlots(8, 13);
const afternoonSlots = generateTimeSlots(13, 18);
const Schedule = ({ morningSchedule, afternoonSchedule, onMorningChange, onAfternoonChange, onSave }: any) => { const handleChange = (type: 'morning' | 'afternoon', time: string, value: string) => { if (type === 'morning') onMorningChange({ ...morningSchedule, [time]: value }); else onAfternoonChange({ ...afternoonSchedule, [time]: value }); }; return (<Card><CardHeader><CardTitle>Agenda do Dia</CardTitle><SectionSaveButton onSave={onSave} /></CardHeader><CardContent className="grid md:grid-cols-2 gap-x-12 gap-y-4"><div className="space-y-3"><h4 className="font-semibold text-stone-800 dark:text-stone-100">Manhã</h4>{morningSlots.map(time => (<div key={time} className="flex items-center gap-3"><p className="w-16 text-right text-sm text-stone-500 dark:text-stone-300 flex-shrink-0">{time}</p><Input placeholder="Atividade..." value={morningSchedule[time] || ''} onChange={(e) => handleChange('morning', time, e.target.value)} /></div>))}</div><div className="space-y-3"><h4 className="font-semibold text-stone-800 dark:text-stone-100">Tarde</h4>{afternoonSlots.map(time => (<div key={time} className="flex items-center gap-3"><p className="w-16 text-right text-sm text-stone-500 dark:text-stone-300 flex-shrink-0">{time}</p><Input placeholder="Atividade..." value={afternoonSchedule[time] || ''} onChange={(e) => handleChange('afternoon', time, e.target.value)} /></div>))}</div></CardContent></Card>); };
// --- FIM DOS COMPONENTES LOCAIS ---

const getWeekStart = (date: Date) => { const d = new Date(date); const day = d.getDay(); const diff = d.getDate() - day + (day === 0 ? -6 : 1); return new Date(d.setDate(diff)).toISOString().split('T')[0]; };

const getInitialDailyData = (date: string, userId: string) => ({ id: null, date, user_id: userId, main_priorities: ['', '', ''], tasks_to_do: [''], people_to_connect: ['', '', ''], day_message: '', notes: '', morning_ritual: {}, evening_reflection: {}, morning_schedule: {}, afternoon_schedule: {} });

export default function DailyPageComponent() {
  const [currentDate, setCurrentDate] = useState(new Date().toISOString().split('T')[0]);
  const [dailyData, setDailyData] = useState<any>(null);
  const [weeklyPlan, setWeeklyPlan] = useState<any>(null);
  const [isLoading, setIsLoading] = useState(true);
  const [isSavingAll, setIsSavingAll] = useState(false);

  useEffect(() => {
    const loadPageData = async () => { setIsLoading(true); try { const user = await User.me(); if (!user) { setIsLoading(false); return; } const dateObj = new Date(currentDate + 'T00:00:00'); const weekStart = getWeekStart(dateObj); const [dailyResult, weeklyResult] = await Promise.all([DailyPage.filter({ date: currentDate, user_id: user.id }), WeeklyPlanning.filter({ week_start_date: weekStart, user_id: user.id })]); const initialData = getInitialDailyData(currentDate, user.id); if (dailyResult && dailyResult.length > 0 && dailyResult[0].id) { const loadedData = dailyResult[0]; loadedData.main_priorities = loadedData.main_priorities || []; while (loadedData.main_priorities.length < 3) loadedData.main_priorities.push(''); loadedData.tasks_to_do = loadedData.tasks_to_do || []; if (loadedData.tasks_to_do.length === 0) loadedData.tasks_to_do.push(''); loadedData.people_to_connect = loadedData.people_to_connect || []; while (loadedData.people_to_connect.length < 3) loadedData.people_to_connect.push(''); setDailyData({ ...initialData, ...loadedData }); } else { setDailyData(initialData); } setWeeklyPlan(weeklyResult && weeklyResult.length > 0 ? weeklyResult[0] : null); } catch (error) { toast.error("Erro ao carregar dados da base de dados."); console.error("Erro:", error); } finally { setIsLoading(false); } }; loadPageData();
  }, [currentDate]);

  const handleSaveSection = async (dataToSave: Partial<any>) => { try { const user = await User.me(); if (!user) throw new Error("Utilizador não autenticado."); if (dailyData?.id) { await DailyPage.update(dailyData.id, dataToSave); setDailyData((prev: any) => ({ ...prev, ...dataToSave })); } else { const newRecord = { ...getInitialDailyData(currentDate, user.id), ...dataToSave }; delete newRecord.id; const { data: createdData } = await DailyPage.create(newRecord); setDailyData((prev: any) => ({ ...prev, ...createdData[0] })); } toast.success("Secção guardada!"); } catch (error) { console.error("Erro ao salvar:", error); toast.error("Erro ao guardar seção."); throw error; } };
  
  const handleSaveAll = async () => { setIsSavingAll(true); const toastId = toast.loading('A guardar página completa...'); try { const { id, ...dataToSave } = dailyData; await handleSaveSection(dataToSave); toast.success("Página guardada com sucesso!", { id: toastId }); } catch (error) { toast.error("Erro ao guardar tudo.", { id: toastId }); } finally { setIsSavingAll(false); } };
  
  const navigateDate = (direction: number) => { const date = new Date(currentDate); date.setUTCDate(date.getUTCDate() + direction); setCurrentDate(date.toISOString().split('T')[0]); };
  const updateListField = (key: 'main_priorities' | 'tasks_to_do' | 'people_to_connect', index: number, value: string) => { const list = [...dailyData[key]]; list[index] = value; setDailyData({ ...dailyData, [key]: list }); };
  const addTask = () => setDailyData({ ...dailyData, tasks_to_do: [...dailyData.tasks_to_do, ''] });
  const weeklyFocusHasContent = weeklyPlan && (weeklyPlan.purpose_aligned_action?.some((i: string) => i.trim() !== '') || weeklyPlan.crucial_interactions?.some((i: string) => i.trim() !== ''));

  if (isLoading || !dailyData) return <div className="flex justify-center items-center h-[80vh]"><Loader2 className="w-8 h-8 animate-spin text-stone-500 dark:text-stone-100" /></div>;
  
  return (
    <div className="max-w-4xl mx-auto p-6 space-y-8">
        <div className="text-center space-y-4">
            <div className="flex justify-center items-center gap-4">
                <Button variant="outline" size="icon" onClick={() => navigateDate(-1)} className="rounded-full"><ChevronLeft className="w-4 h-4" /></Button>
                <h1 className="text-2xl md:text-3xl font-bold text-stone-900 dark:text-stone-100 capitalize">{new Date(currentDate + 'T00:00:00').toLocaleDateString('pt-BR', { weekday: 'long', year: 'numeric', month: 'long', day: 'numeric' })}</h1>
                <Button variant="outline" size="icon" onClick={() => navigateDate(1)} className="rounded-full"><ChevronRight className="w-4 h-4" /></Button>
            </div>
        </div>
        <div className="grid md:grid-cols-2 gap-6">
            <Link to={createPageUrl(`MorningRitual?date=${currentDate}`)}><Card className="hover:shadow-lg transition-all duration-300 hover:-translate-y-1 group cursor-pointer"><CardContent className="p-6 flex items-center justify-between"><div className="flex items-center gap-4"><div className="p-3 bg-stone-100 dark:bg-gray-700 rounded-xl"><Sun className="w-6 h-6 text-stone-600 dark:text-amber-400" /></div><div><h3 className="text-lg font-bold text-stone-900 dark:text-stone-100">Ritual Matinal</h3><p className="text-sm text-stone-700 dark:text-stone-300">Comece o dia com intenção.</p></div></div>{dailyData.morning_ritual && Object.values(dailyData.morning_ritual).some(v => v) ? (<CheckCircle className="w-6 h-6 text-green-500" />) : (<ArrowRight className="w-6 h-6 text-stone-400 group-hover:translate-x-1 transition-transform" />)}</CardContent></Card></Link>
            <Link to={createPageUrl(`EveningReflection?date=${currentDate}`)}><Card className="hover:shadow-lg transition-all duration-300 hover:-translate-y-1 group cursor-pointer"><CardContent className="p-6 flex items-center justify-between"><div className="flex items-center gap-4"><div className="p-3 bg-stone-100 dark:bg-gray-700 rounded-xl"><Moon className="w-6 h-6 text-stone-700 dark:text-amber-400" /></div><div><h3 className="text-lg font-bold text-stone-900 dark:text-stone-100">Escrita Noturna</h3><p className="text-sm text-stone-700 dark:text-stone-300">Reflita e aprecie.</p></div></div>{dailyData.evening_reflection && Object.values(dailyData.evening_reflection).some(v => v) ? (<CheckCircle className="w-6 h-6 text-green-500" />) : (<ArrowRight className="w-6 h-6 text-stone-400 group-hover:translate-x-1 transition-transform" />)}</CardContent></Card></Link>
        </div>
        {weeklyFocusHasContent && (<Card><CardHeader><CardTitle className="flex items-center gap-3"><Target className="w-5 h-5 text-stone-600 dark:text-amber-400" />Seu Foco Para a Semana</CardTitle></CardHeader><CardContent className="space-y-3 text-sm"></CardContent></Card>)}
        <Card><CardHeader><CardTitle>Mensagem para seu dia</CardTitle><SectionSaveButton onSave={() => handleSaveSection({ day_message: dailyData.day_message })} /></CardHeader><CardContent><Textarea value={dailyData.day_message || ''} onChange={(e) => setDailyData({ ...dailyData, day_message: e.target.value })} placeholder="Qual mensagem você quer carregar consigo hoje?"/></CardContent></Card>
        <Card><CardHeader><CardTitle>3 Principais Prioridades</CardTitle><SectionSaveButton onSave={() => handleSaveSection({ main_priorities: dailyData.main_priorities })} /></CardHeader><CardContent className="space-y-3">{dailyData.main_priorities.map((priority: string, index: number) => (<div key={index} className="flex items-center gap-3"><div className="flex items-center justify-center w-8 h-8 bg-stone-800 dark:bg-stone-100 text-white dark:text-black rounded-full text-sm font-bold flex-shrink-0">{index + 1}</div><Input value={priority} placeholder={`Prioridade ${index + 1}...`} onChange={(e) => updateListField('main_priorities', index, e.target.value)}/></div>))}</CardContent></Card>
        <Schedule morningSchedule={dailyData.morning_schedule || {}} afternoonSchedule={dailyData.afternoon_schedule || {}} onMorningChange={(newSchedule: any) => setDailyData((prev: any) => ({ ...prev, morning_schedule: newSchedule }))} onAfternoonChange={(newSchedule: any) => setDailyData((prev: any) => ({ ...prev, afternoon_schedule: newSchedule }))} onSave={() => handleSaveSection({ morning_schedule: dailyData.morning_schedule, afternoon_schedule: dailyData.afternoon_schedule })} />
        <div className="grid md:grid-cols-2 gap-6">
          <Card><CardHeader><CardTitle>Tarefas a fazer</CardTitle><SectionSaveButton onSave={() => handleSaveSection({ tasks_to_do: dailyData.tasks_to_do })} /></CardHeader><CardContent className="space-y-3">{dailyData.tasks_to_do.map((task: string, index: number) => (<Input key={index} value={task} onChange={(e) => updateListField('tasks_to_do', index, e.target.value)} placeholder={`Tarefa ${index + 1}...`}/>))}<Button variant="outline" onClick={addTask} className="w-full"><Plus className="w-4 h-4 mr-2" /> Adicionar Tarefa</Button></CardContent></Card>
          <Card><CardHeader><CardTitle>Pessoas para me conectar</CardTitle><SectionSaveButton onSave={() => handleSaveSection({ people_to_connect: dailyData.people_to_connect })} /></CardHeader><CardContent className="space-y-3">{dailyData.people_to_connect.slice(0, 3).map((person: string, index: number) => (<Input key={index} value={person} onChange={(e) => updateListField('people_to_connect', index, e.target.value)} placeholder={`Pessoa ${index + 1}...`}/>))}</CardContent></Card>
        </div>
        <Card><CardHeader><CardTitle>Notas Adicionais</CardTitle><SectionSaveButton onSave={() => handleSaveSection({ notes: dailyData.notes })} /></CardHeader><CardContent><Textarea value={dailyData.notes || ''} onChange={(e) => setDailyData({ ...dailyData, notes: e.target.value })} placeholder="Outras reflexões, insights ou anotações..." className="min-h-[120px]"/></CardContent></Card>
        <div className="flex justify-center pt-6">
          <Button onClick={handleSaveAll} disabled={isSavingAll} size="lg"><>{isSavingAll ? <Loader2 className="w-5 h-5 mr-2 animate-spin" /> : <Save className="w-5 h-5 mr-2" />} {isSavingAll ? 'A guardar...' : 'Guardar Página Diária Completa'}</></Button>
        </div>
    </div>
  );
}



Dashboard
import React, { useState, useEffect } from "react";
import { Link, useNavigate } from "react-router-dom";
import { toast } from 'react-hot-toast';
import { Calendar, Target, Sun, Lightbulb, ArrowRight, Quote, Loader2, Flame } from "lucide-react";

// --- IMPORTAÇÕES REAIS ---
import { User, DailyPage } from "@/entities/index";
import { createPageUrl } from "@/utils";
import { getTodayQuote } from "@/utils/quotes";
import { calculateStreak } from "@/utils/stats";
import { Card, CardContent } from "@/components/ui/card";

export default function Dashboard() {
  const navigate = useNavigate();
  const [userName, setUserName] = useState('');
  const [isLoading, setIsLoading] = useState(true);
  const [streak, setStreak] = useState(0);

  useEffect(() => {
    const loadDashboardData = async () => {
      setIsLoading(true);
      try {
        const user = await User.me();
        if (!user) {
          setIsLoading(false);
          return;
        }
        
        if (!user.user_metadata?.hasCompletedOnboarding) {
          // navigate(createPageUrl('Introduction'));
          // return;
        }

        const fullName = user.user_metadata?.full_name || 'Ser';
        setUserName(fullName.split(' ')[0]);

        const allDailyPages = await DailyPage.filter({ user_id: user.id });
        
        if (allDailyPages && allDailyPages.length > 0) {
            const dates = allDailyPages
              .filter((page: any) => page && typeof page.date === 'string')
              .map((page: any) => page.date.split('T')[0]);
            
            if(dates.length > 0) {
              setStreak(calculateStreak(dates));
            }
        } else {
          setStreak(0);
        }

      } catch (error) {
        console.error("Erro ao carregar dados do dashboard:", error);
        toast.error("Não foi possível carregar os dados do dashboard.");
      } finally {
        setIsLoading(false);
      }
    };
    loadDashboardData();
  }, [navigate]);

  const quickActions = [
    { title: "Visão Macro Mensal", description: "Defina seus projetos...", icon: Calendar, url: createPageUrl("MonthlyVision") },
    { title: "Planejamento Semanal", description: "Reflexões da semana...", icon: Target, url: createPageUrl("WeeklyPlanning") },
    { title: "Página Diária", description: "Ritual matinal e reflexões...", icon: Sun, url: createPageUrl("DailyPage") },
    { title: "Visão do Futuro", description: "Objetivos de longo prazo...", icon: Lightbulb, url: createPageUrl("FutureVision") }
  ];

  if (isLoading) {
    return <div className="flex justify-center items-center h-[80vh]"><Loader2 className="w-8 h-8 animate-spin text-stone-500 dark:text-stone-100" /></div>;
  }

  return (
    <div className="max-w-7xl mx-auto p-6 space-y-8">
        <div className="text-center space-y-6 py-12">
            <h1 className="text-4xl md:text-5xl font-light text-stone-900 dark:text-stone-100">
              Bem-vindo(a), <span className="font-medium">{userName}</span>
            </h1>
            <p className="text-xl text-stone-600 dark:text-stone-300 max-w-3xl mx-auto font-light leading-relaxed">
              Este é seu espaço para planejar com consciência.
            </p>
        </div>

        <div className={`grid gap-6 ${streak > 0 ? 'md:grid-cols-2' : 'max-w-2xl mx-auto'}`}>
          <Card>
            <CardContent className="p-8 text-center flex flex-col justify-center items-center min-h-[180px]">
              <Quote className="w-8 h-8 text-stone-400 dark:text-stone-500 mx-auto mb-4" />
              <blockquote className="text-lg text-stone-700 font-light italic leading-relaxed dark:text-stone-200">
                  "{getTodayQuote()}"
              </blockquote>
              <p className="text-sm text-stone-500 dark:text-stone-400 mt-4">Reflexão do dia</p>
            </CardContent>
          </Card>
          
          {streak > 0 && (
            <Card className="border-amber-300 dark:border-amber-500 border-2 shadow-lg">
              <CardContent className="p-6 flex flex-col justify-center items-center text-center min-h-[180px]">
                <div className="p-4 bg-amber-100 dark:bg-gray-700 rounded-full mb-4">
                  <Flame className="w-8 h-8 text-amber-600 dark:text-amber-400" />
                </div>
                <div>
                  <h3 className="font-bold text-xl text-stone-900 dark:text-stone-100">Sequência de {streak} {streak === 1 ? 'dia' : 'dias'}!</h3>
                  <p className="text-stone-600 dark:text-stone-300 mt-1">
                    Continue o ótimo trabalho a construir o seu hábito.
                  </p>
                </div>
              </CardContent>
            </Card>
          )}
        </div>
        
        <div className="grid md:grid-cols-2 lg:grid-cols-4 gap-6 pt-8">
            {quickActions.map((action) => (
            <Link key={action.title} to={action.url}>
                <Card className="h-full hover:shadow-lg transition-all duration-300 hover:-translate-y-1 group cursor-pointer">
                  <CardContent className="p-6">
                      <div className="flex items-center justify-between">
                          <div className="p-3 bg-stone-100 dark:bg-gray-700 rounded-lg"><action.icon className="w-6 h-6 text-stone-600 dark:text-stone-300" /></div>
                          <ArrowRight className="w-5 h-5 text-stone-400 group-hover:text-stone-600 dark:group-hover:text-stone-200 transition-transform" />
                      </div>
                      <h3 className="text-lg text-stone-900 dark:text-stone-100 font-semibold pt-4">{action.title}</h3>
                      <p className="text-stone-600 dark:text-stone-300 text-sm leading-relaxed font-light mt-1">{action.description}</p>
                  </CardContent>
                </Card>
            </Link>
            ))}
        </div>
    </div>
  );
}


EveningReflection

import React, { useState, useEffect } from "react";
import { DailyPage, User } from "@/Entities";
import { Button } from "@/Components/ui/Button";
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { Textarea } from "@/Components/ui/Textarea";
import { Label } from "@/Components/ui/Label";
import { Moon, Save, ArrowLeft } from "lucide-react";
import { useNavigate } from "react-router-dom";
import { createPageUrl } from "@/utils";

export default function EveningReflectionPage() {
  const navigate = useNavigate();
  const urlParams = new URLSearchParams(window.location.search);
  const date = urlParams.get('date');

  const [dailyEntry, setDailyEntry] = useState(null);
  const [eveningReflection, setEveningReflection] = useState({});
  const [isLoading, setIsLoading] = useState(false);
  const [isSaving, setIsSaving] = useState(false);

  useEffect(() => {
    const loadDailyEntry = async () => {
      setIsLoading(true);
      try {
        const user = await User.me();
        if (!user) {
          console.warn("Usuário não logado.");
          setIsLoading(false);
          return;
        }
        let entry = await DailyPage.filter({ date, user_id: user.id });
        if (entry.length > 0) {
          setDailyEntry(entry[0]);
          setEveningReflection(entry[0].evening_reflection || {});
        } else {
          setDailyEntry({ date });
          setEveningReflection({});
        }
      } catch (error) {
        console.error("Erro ao carregar página diária:", error);
      } finally {
        setIsLoading(false);
      }
    };

    if (date) {
      loadDailyEntry();
    }
  }, [date]);

  const handleSave = async () => {
    if (!date) return;
    setIsSaving(true);
    try {
      const user = await User.me();
      if (!user) {
        console.error("Usuário não logado.");
        setIsSaving(false);
        return;
      }

      let payload = { ...dailyEntry, evening_reflection: eveningReflection };
      
      if (dailyEntry.id) {
        await DailyPage.update(dailyEntry.id, { evening_reflection: eveningReflection });
      } else {
        payload = {
          ...payload,
          date: date,
          user_id: user.id,
        };
        await DailyPage.create(payload);
      }
      navigate(createPageUrl(`DailyPage?date=${date}`));
    } catch (error) {
      console.error("Erro ao salvar reflexão noturna:", error);
    } finally {
      setIsSaving(false);
    }
  };

  const handleInputChange = (field, value) => {
    setEveningReflection(prev => ({ ...prev, [field]: value }));
  };

  const eveningQuestions = [
    { key: 'daily_blessings', text: 'Quais bênçãos, grandes e pequenas, permearam meu dia hoje? Como posso cultivar um coração grato e apreciar a vida?' },
    { key: 'major_challenge', text: 'Qual foi a maior provação que enfrentei hoje? Que forças descobri em mim mesmo ao superá-la?' },
    { key: 'wisdom_gained', text: 'Qual foi a sabedoria que emergiu das experiências de hoje? Como posso integrá-la em minha jornada?' },
    { key: 'moments_of_misalignment', text: 'Quais foram os momentos de desalinho ou frustração hoje? Que lições posso extrair deles com compaixão por mim mesmo?' },
    { key: 'better_choices', text: 'Quais escolhas ou ações poderiam ter nutrido mais meu bem-estar e propósito hoje?' },
    { key: 'sustaining_habits', text: 'Quais hábitos me sustentaram hoje? Como posso celebrá-los e buscar formas de aprimoramento?' }
  ];

  if (isLoading) {
    return <div className="flex justify-center items-center h-screen"><div className="animate-spin rounded-full h-16 w-16 border-b-2 border-stone-500"></div></div>;
  }
  
  return (
    <div className="max-w-3xl mx-auto p-6 space-y-8">
      <div className="text-center space-y-4">
        <div className="flex justify-center mb-4">
          <div className="p-3 bg-stone-100 dark:bg-black/50 rounded-xl border border-stone-200">
            <Moon className="w-6 h-6 text-stone-700 dark:text-stone-100" />
          </div>
        </div>
        <h1 className="text-2xl md:text-3xl font-bold text-stone-900 dark:text-stone-100">Escrita Noturna</h1>
        <p className="text-stone-600 dark:text-stone-100">
          Reflexão sobre aprendizados, gratidão e avaliação do dia.
        </p>
      </div>

      <Card className="bg-white border-stone-200">
        <CardHeader>
          <CardTitle className="text-stone-900 dark:text-stone-100">Reflexões Noturnas</CardTitle>
        </CardHeader>
          <CardContent className="space-y-6">
            {eveningQuestions.map((question, index) => (
              <div key={question.key} className="flex flex-col gap-2">
                <Label htmlFor={`evening-q-${index}`} className="text-stone-800 dark:text-stone-100 font-medium">
                  {index + 8}. {question.text}
                </Label>
                <Textarea
                  id={`evening-q-${index}`}
                  value={eveningReflection[question.key] || ''}
                  onChange={(e) => handleInputChange(question.key, e.target.value)}
                  placeholder="Sua reflexão..."
                  className="bg-stone-50/50 min-h-[100px]"
                />
              </div>
            ))}
        </CardContent>
      </Card>

      <div className="flex justify-between items-center pt-6">
        <Button
          variant="outline"
          onClick={() => navigate(createPageUrl(`DailyPage?date=${date}`))}
          className="bg-white dark:bg-black"
        >
          <ArrowLeft className="w-4 h-4 mr-2" />
          Voltar para a Página Diária
        </Button>
        <Button
          onClick={handleSave}
          disabled={isSaving}
          size="lg"
          className="px-8 bg-stone-800 hover:bg-stone-900 dark:bg-stone-100 text-white dark:text-black shadow-lg"
        >
          <Save className="w-4 h-4 mr-2" />
          {isSaving ? 'Salvando...' : 'Salvar Reflexão'}
        </Button>
      </div>
    </div>
  );
}


Export
import React, { useState } from 'react';
import toast from 'react-hot-toast';
import { Button } from '@/Components/ui/Button';
import { Card, CardContent, CardHeader, CardTitle } from '@/Components/ui/Card';
import { Input } from '@/Components/ui/Input';
import { Label } from '@/Components/ui/Label';
import { Printer, Calendar as CalendarIcon, Loader2, FileText } from 'lucide-react';
import { DailyPage, WeeklyPlanning, MonthlyVision, User, FutureVision } from '@/entities/index'; // Adicionado FutureVision
import PrintableDailyPage from '@/Components/export/PrintableDailyPage';
import PrintableWeeklyPlanning from '@/Components/export/PrintableWeeklyPlanning';
import PrintableMonthlyVision from '@/Components/export/PrintableMonthlyVision';
import PrintableFutureVision from '@/Components/export/PrintableFutureVision'; // Adicionado
import '@/print.css';

const getInitialDateRange = () => {
  const endDate = new Date();
  const startDate = new Date();
  startDate.setMonth(endDate.getMonth() - 1); // Pega os últimos 30 dias
  return {
    start: startDate.toISOString().slice(0, 10),
    end: endDate.toISOString().slice(0, 10),
  };
};

export default function ExportPage() {
  const [startDate, setStartDate] = useState(getInitialDateRange().start);
  const [endDate, setEndDate] = useState(getInitialDateRange().end);
  const [dataToExport, setDataToExport] = useState<any>(null);
  const [isLoading, setIsLoading] = useState(false);

  const fetchData = async () => {
    setIsLoading(true);
    setDataToExport(null);
    const toastId = toast.loading("Buscando seus registros...");
    try {
      const user = await User.me();
      if (!user) {
        toast.error("Por favor, faça login.", { id: toastId });
        setIsLoading(false);
        return;
      }

      const start = new Date(startDate + 'T00:00:00');
      const end = new Date(endDate + 'T23:59:59');

      const [daily, weekly, monthly, future] = await Promise.all([
        DailyPage.filter({ user_id: user.id, date: { gte: start.toISOString(), lte: end.toISOString() } }),
        WeeklyPlanning.filter({ user_id: user.id, week_start_date: { gte: start.toISOString(), lte: end.toISOString() } }),
        MonthlyVision.filter({ user_id: user.id, month: { gte: startDate.slice(0, 7), lte: endDate.slice(0, 7) } }),
        FutureVision.filter({ user_id: user.id })
      ]);

      const validDaily = daily.filter(p => p.id);
      const validWeekly = weekly.filter(p => p.id);
      const validMonthly = monthly.filter(p => p.id);
      const validFuture = future.filter(p => p.id);
      
      console.log("DADOS ENCONTRADOS:", { meses: validMonthly, semanas: validWeekly, dias: validDaily, futuro: validFuture });

      setDataToExport({
        dailyPages: validDaily,
        weeklyPlannings: validWeekly,
        monthlyVisions: validMonthly,
        futureVisions: validFuture
      });
      toast.success("Pré-visualização gerada!", { id: toastId });
    } catch (error) {
      toast.error("Ocorreu um erro ao buscar os dados.", { id: toastId });
      console.error("Error fetching data for export:", error);
    } finally {
      setIsLoading(false);
    }
  };

  const handlePrint = () => {
    window.print();
  };

  const hasData = dataToExport && (
    dataToExport.dailyPages.length > 0 || 
    dataToExport.weeklyPlannings.length > 0 || 
    dataToExport.monthlyVisions.length > 0 || 
    dataToExport.futureVisions.length > 0
  );

  return (
    <>
      <div className="min-h-[calc(100vh-200px)] print:hidden max-w-4xl mx-auto p-6 space-y-8 flex flex-col">
        <Card className="bg-white dark:bg-black/50">
          <CardHeader>
            <CardTitle className='text-2xl font-bold text-stone-800 dark:text-white'>Exportar sua Jornada</CardTitle>
            <p className='text-stone-600 dark:text-white'>Selecione o período que deseja imprimir ou salvar como PDF.</p>
          </CardHeader>
          <CardContent className="grid md:grid-cols-3 gap-6 items-end">
            <div className="space-y-2">
              <Label htmlFor="start-date" className="flex items-center gap-2"><CalendarIcon className="w-4 h-4" /> Data de Início</Label>
              <Input id="start-date" type="date" value={startDate} onChange={(e) => setStartDate(e.target.value)} />
            </div>
            <div className="space-y-2">
              <Label htmlFor="end-date" className="flex items-center gap-2"><CalendarIcon className="w-4 h-4" /> Data de Fim</Label>
              <Input id="end-date" type="date" value={endDate} onChange={(e) => setEndDate(e.target.value)} />
            </div>
            <Button onClick={fetchData} disabled={isLoading} size="lg">
              {isLoading ? <Loader2 className="w-5 h-5 mr-2 animate-spin" /> : <FileText className="w-5 h-5 mr-2" />}
              {isLoading ? "Buscando..." : "Gerar Pré-visualização"}
            </Button>
          </CardContent>
        </Card>

        {dataToExport && (
          <div className="flex-grow flex flex-col items-center justify-center text-center bg-stone-50 dark:bg-black/50 rounded-lg p-8 border-dashed border-2">
            {hasData ? (
              <>
                <h2 className="text-xl font-semibold text-stone-800 dark:text-white">Sua pré-visualização está pronta!</h2>
                <p className="text-stone-600 dark:text-white mt-2 mb-6 max-w-md">
                  Encontrados {dataToExport.monthlyVisions.length} planejamentos mensais, 
                  {' '}{dataToExport.weeklyPlannings.length} semanais, 
                  {' '}{dataToExport.dailyPages.length} páginas diárias
                  {dataToExport.futureVisions.length > 0 ? ' e sua visão de futuro.' : '.'}
                </p>
                <Button onClick={handlePrint} size="lg">
                  <Printer className="w-5 h-5 mr-2" />
                  Imprimir / Salvar como PDF
                </Button>
              </>
            ) : (
              <>
                <h2 className="text-xl font-semibold text-stone-700 dark:text-white">Nenhum dado encontrado</h2>
                <p className="text-stone-500 dark:text-white mt-2">Não há anotações salvas no período selecionado. Tente ajustar as datas.</p>
              </>
            )}
          </div>
        )}
      </div>

      <div className="hidden print:block">
        {hasData && (
          <>
            {dataToExport.monthlyVisions.map((vision: any) => <PrintableMonthlyVision key={vision.id} visionData={vision} />)}
            {dataToExport.weeklyPlannings.map((planning: any) => <PrintableWeeklyPlanning key={planning.id} weeklyData={planning} />)}
            {dataToExport.dailyPages.map((page: any) => <PrintableDailyPage key={page.id} dailyData={page} />)}
            {dataToExport.futureVisions.map((vision: any) => <PrintableFutureVision key={vision.id} visionData={vision} />)}
          </>
        )}
      </div>
    </>
  );
}



FutureVision
import React, { useState, useEffect, ReactNode } from "react";
import toast from 'react-hot-toast';
import { Save, Plus, Trash2, Target, Loader2, Lightbulb } from "lucide-react";

// --- INÍCIO DAS DEPENDÊNCIAS MOCADAS ---
// Adicionei mocks para resolver os erros de importação e apliquei os estilos do tema escuro.

// Tipos
type Goal = { goal: string; steps: string; target_date: string; };

// Entidades
const User = { me: async () => ({ id: 'mock_user_123' }) };
const FutureVision = {
  filter: async (filters: { user_id: string }) => { console.log("Filtrando FutureVision:", filters); return []; },
  create: async (data: any) => { console.log("Criando FutureVision:", data); return { data: [{...data, id: `new_${Date.now()}`}] }; },
  update: async (id: string, data: any) => { console.log(`Atualizando FutureVision ${id}:`, data); return {}; }
};

// Componentes de UI
const Button = ({ children, className = '', variant, size, ...props }: React.ButtonHTMLAttributes<HTMLButtonElement> & { variant?: string, size?: string }) => (
  <button 
    className={`inline-flex items-center justify-center rounded-md text-sm font-medium transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-stone-600 disabled:opacity-50
      ${variant === 'outline' ? 'border border-stone-300 bg-transparent hover:bg-stone-100 dark:border-gray-600 dark:text-stone-300 dark:hover:bg-gray-700' : ''}
      ${!variant || variant === 'default' ? 'bg-stone-800 text-stone-50 hover:bg-stone-800/90 dark:bg-stone-100 dark:text-stone-900 dark:hover:bg-stone-100/90' : ''}
      ${variant === 'ghost' ? 'hover:bg-stone-100 dark:hover:bg-gray-700' : ''}
      ${size === 'sm' ? 'h-9 px-3' : 'h-10 px-4 py-2'}
      ${size === 'lg' ? 'h-11 px-8' : ''}
      ${className}`}
    {...props}
  >
    {children}
  </button>
);
const Card = ({ children, className = '' }: { children: ReactNode, className?: string }) => <div className={`bg-white rounded-lg shadow-sm border border-stone-200 dark:bg-gray-800 dark:border-gray-700 ${className}`}>{children}</div>;
const CardHeader = ({ children, className = '' }: { children: ReactNode, className?: string }) => <div className={`p-6 border-b border-stone-200 dark:border-gray-700 ${className}`}>{children}</div>;
const CardTitle = ({ children, className = '' }: { children: ReactNode, className?: string }) => <h3 className={`text-xl font-semibold text-stone-800 dark:text-stone-100 ${className}`}>{children}</h3>;
const CardContent = ({ children, className = '' }: { children: ReactNode, className?: string }) => <div className={`p-6 ${className}`}>{children}</div>;
const Input = (props: React.InputHTMLAttributes<HTMLInputElement>) => <input className="flex h-10 w-full rounded-md border border-stone-300 bg-transparent px-3 py-2 text-sm text-stone-900 placeholder:text-stone-500 focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-stone-600 dark:border-gray-600 dark:bg-gray-700 dark:text-stone-200 dark:placeholder:text-gray-400 dark:focus-visible:ring-amber-500" {...props} />;
const Textarea = (props: React.TextareaHTMLAttributes<HTMLTextAreaElement>) => <textarea className="flex min-h-[80px] w-full rounded-md border border-stone-300 bg-transparent px-3 py-2 text-sm text-stone-900 placeholder:text-stone-500 focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-stone-600 dark:border-gray-600 dark:bg-gray-700 dark:text-stone-200 dark:placeholder:text-gray-400 dark:focus-visible:ring-amber-500" {...props} />;
const Label = (props: React.LabelHTMLAttributes<HTMLLabelElement>) => <label className="font-medium text-stone-700 dark:text-stone-300" {...props} />;
const FormField = ({ label, children, htmlFor }: { label: string, children: ReactNode, htmlFor?: string }) => (
  <div className="space-y-2">
    <Label htmlFor={htmlFor}>{label}</Label>
    {children}
  </div>
);

// --- FIM DAS DEPENDÊNCIAS MOCADAS ---

const INITIAL_STATE = {
  id: null,
  user_id: '',
  ideal_future_description: '',
  life_purpose: '',
  person_i_want_to_be: '',
  most_important_to_achieve: '',
  end_of_life_reflection: '',
  one_year_goals: [{ goal: '', steps: '', target_date: '' }],
  three_year_goals: [{ goal: '', steps: '', target_date: '' }]
};

export default function FutureVisionPage() {
  const [visionData, setVisionData] = useState<any>(INITIAL_STATE);
  const [isLoading, setIsLoading] = useState(true);
  const [isSaving, setIsSaving] = useState(false);

  useEffect(() => {
    const loadFutureVision = async () => {
      setIsLoading(true);
      try {
        const user = await User.me();
        if (!user) return;
        
        const existing = await FutureVision.filter({ user_id: user.id });
        if (existing && existing.length > 0 && existing[0].id) {
          const data = { ...INITIAL_STATE, ...existing[0] };
          if (!data.one_year_goals || data.one_year_goals.length === 0) {
            data.one_year_goals = [{ goal: '', steps: '', target_date: '' }];
          }
          if (!data.three_year_goals || data.three_year_goals.length === 0) {
            data.three_year_goals = [{ goal: '', steps: '', target_date: '' }];
          }
          setVisionData(data);
        } else {
          setVisionData({ ...INITIAL_STATE, user_id: user.id });
        }
      } catch (error) {
        toast.error("Não foi possível carregar os dados.");
        console.error("Erro ao carregar Visão do Futuro:", error);
      } finally {
        setIsLoading(false);
      }
    };
    loadFutureVision();
  }, []);

  const handleSave = async () => {
    setIsSaving(true);
    const toastId = toast.loading('A salvar a sua visão...');
    try {
      const user = await User.me();
      if (!user) throw new Error("Usuário não autenticado.");

      const dataToSave = { ...visionData, user_id: user.id };

      if (visionData.id) {
        await FutureVision.update(visionData.id, dataToSave);
      } else {
        const result = await FutureVision.create(dataToSave);
        if (result && result.data && result.data.length > 0) {
          setVisionData(result.data[0]);
        } else {
          throw new Error("Falha ao criar a visão de futuro.");
        }
      }
      toast.success("Visão do futuro salva!", { id: toastId });
    } catch (error) {
      toast.error("Erro ao salvar.", { id: toastId });
      console.error("Erro ao salvar Visão do Futuro:", error);
    } finally {
      setIsSaving(false);
    }
  };

  const updateGoal = (type: 'one_year_goals' | 'three_year_goals', index: number, field: string, value: string) => {
    const updatedGoals = [...visionData[type]];
    updatedGoals[index] = { ...updatedGoals[index], [field]: value };
    setVisionData({ ...visionData, [type]: updatedGoals });
  };

  const addGoal = (type: 'one_year_goals' | 'three_year_goals') => {
    setVisionData((prev: any) => ({
      ...prev,
      [type]: [...(prev[type] || []), { goal: '', steps: '', target_date: '' }]
    }));
  };

  const removeGoal = (type: 'one_year_goals' | 'three_year_goals', index: number) => {
    if (visionData[type].length <= 1) return;
    const updatedGoals = visionData[type].filter((_: any, i: number) => i !== index);
    setVisionData({ ...visionData, [type]: updatedGoals });
  };

  const reflectionQuestions = [
    { key: 'ideal_future_description', title: 'Como eu imagino meu futuro ideal?', subtitle: 'Procure escrever um único parágrafo descritivo.' },
    { key: 'life_purpose', title: 'Qual o propósito que me motiva e alimenta meu estado de espírito e felicidade?' },
    { key: 'person_i_want_to_be', title: 'Que tipo de pessoa eu sou e quais passos devo seguir para que o mundo veja isso?' },
    { key: 'most_important_to_achieve', title: 'Para mim o mais importante de realizar, experienciar e me tornar é...' },
    { key: 'end_of_life_reflection', title: 'No final da minha vida eu quero olhar para trás no tempo e saber que...' }
  ];
  
  if (isLoading) {
    return <div className="flex justify-center items-center h-[80vh]"><Loader2 className="w-8 h-8 animate-spin text-stone-500 dark:text-stone-100" /></div>;
  }

  return (
    <div className="max-w-4xl mx-auto p-6 space-y-12">
      <div className="text-center space-y-2">
        <h1 className="text-3xl md:text-4xl font-bold text-stone-900 dark:text-stone-100 capitalize flex justify-center items-center gap-3">
          <Lightbulb className="w-8 h-8 text-stone-600 dark:text-amber-400"/>
          Visão de Futuro
        </h1>
        <p className="text-stone-600 dark:text-stone-300">Conecte-se com sua visão de longo prazo para guiar suas ações presentes.</p>
      </div>

      <div className="space-y-6">
        {reflectionQuestions.map((question) => (
          <Card key={question.key}>
            <CardContent className="p-6">
              <FormField label={question.title} htmlFor={question.key}>
                {question.subtitle && <p className="text-sm text-stone-600 dark:text-stone-300 mb-2">{question.subtitle}</p>}
                <Textarea
                  id={question.key}
                  value={visionData[question.key] || ''}
                  onChange={(e) => setVisionData({ ...visionData, [question.key]: e.target.value })}
                  placeholder="Sua reflexão..."
                  className="min-h-[120px] w-full dark:bg-white/10"
                />
              </FormField>
            </CardContent>
          </Card>
        ))}
      </div>

      <div className="space-y-8">
        <Card>
          <CardHeader>
            <CardTitle className="flex items-center gap-3"><Target className="w-5 h-5 text-stone-600 dark:text-amber-400" /> Objetivos de 1 Ano</CardTitle>
          </CardHeader>
          <CardContent className="space-y-6">
            {visionData.one_year_goals.map((goal: Goal, index: number) => (
              <div key={index} className="p-4 bg-stone-50/80 rounded-lg border border-stone-200 dark:bg-gray-700/50 dark:border-gray-600 space-y-4">
                <div className="flex justify-between items-center">
                  <Label className="font-medium">Objetivo {index + 1}</Label>
                  {visionData.one_year_goals.length > 1 &&
                    <Button variant="ghost" size="sm" onClick={() => removeGoal('one_year_goals', index)} className="text-stone-500 hover:text-stone-800 dark:text-stone-400 dark:hover:text-stone-100"><Trash2 className="w-4 h-4" /></Button>
                  }
                </div>
                <div className="flex flex-col gap-4">
                  <FormField label="Objetivo" htmlFor={`1y-goal-${index}`}>
                    <Textarea id={`1y-goal-${index}`} value={goal.goal} onChange={(e) => updateGoal('one_year_goals', index, 'goal', e.target.value)} placeholder="Descreva seu objetivo..." className="h-20 w-full dark:bg-white/10" />
                  </FormField>
                  <FormField label="Principais Passos" htmlFor={`1y-steps-${index}`}>
                    <Textarea id={`1y-steps-${index}`} value={goal.steps} onChange={(e) => updateGoal('one_year_goals', index, 'steps', e.target.value)} placeholder="Quais são os maiores passos?" className="h-24 w-full dark:bg-white/10" />
                  </FormField>
                  <FormField label="Data Alvo" htmlFor={`1y-date-${index}`}>
                    <Input id={`1y-date-${index}`} type="date" value={goal.target_date} onChange={(e) => updateGoal('one_year_goals', index, 'target_date', e.target.value)} className="w-fit dark:bg-white/10" />
                  </FormField>
                </div>
              </div>
            ))}
            <Button variant="outline" onClick={() => addGoal('one_year_goals')} className="w-full">
              <Plus className="w-4 h-4 mr-2" /> Adicionar Objetivo
            </Button>
          </CardContent>
        </Card>
        <Card>
          <CardHeader>
            <CardTitle className="flex items-center gap-3"><Target className="w-5 h-5 text-stone-600 dark:text-amber-400" /> Objetivos de 3 Anos</CardTitle>
          </CardHeader>
          <CardContent className="space-y-6">
            {visionData.three_year_goals.map((goal: Goal, index: number) => (
              <div key={index} className="p-4 bg-stone-50/80 rounded-lg border border-stone-200 dark:bg-gray-700/50 dark:border-gray-600 space-y-4">
                <div className="flex justify-between items-center">
                  <Label className="font-medium">Objetivo {index + 1}</Label>
                  {visionData.three_year_goals.length > 1 &&
                    <Button variant="ghost" size="sm" onClick={() => removeGoal('three_year_goals', index)} className="text-stone-500 hover:text-stone-800 dark:text-stone-400 dark:hover:text-stone-100"><Trash2 className="w-4 h-4" /></Button>
                  }
                </div>
                <div className="flex flex-col gap-4">
                  <FormField label="Objetivo" htmlFor={`3y-goal-${index}`}>
                    <Textarea id={`3y-goal-${index}`} value={goal.goal} onChange={(e) => updateGoal('three_year_goals', index, 'goal', e.target.value)} placeholder="Descreva seu objetivo..." className="h-20 w-full dark:bg-white/10" />
                  </FormField>
                  <FormField label="Principais Passos" htmlFor={`3y-steps-${index}`}>
                    <Textarea id={`3y-steps-${index}`} value={goal.steps} onChange={(e) => updateGoal('three_year_goals', index, 'steps', e.target.value)} placeholder="Quais são os maiores passos?" className="h-24 w-full dark:bg-white/10" />
                  </FormField>
                  <FormField label="Data Alvo" htmlFor={`3y-date-${index}`}>
                    <Input id={`3y-date-${index}`} type="date" value={goal.target_date} onChange={(e) => updateGoal('three_year_goals', index, 'target_date', e.target.value)} className="w-fit dark:bg-white/10" />
                  </FormField>
                </div>
              </div>
            ))}
            <Button variant="outline" onClick={() => addGoal('three_year_goals')} className="w-full">
              <Plus className="w-4 h-4 mr-2" /> Adicionar Objetivo
            </Button>
          </CardContent>
        </Card>
      </div>

      <div className="flex justify-center pt-4 pb-8">
        <Button onClick={handleSave} disabled={isSaving} size="lg">
          {isSaving ? <Loader2 className="w-5 h-5 mr-2 animate-spin" /> : <Save className="w-5 h-5 mr-2" />}
          {isSaving ? 'A guardar...' : 'Guardar Visão'}
        </Button>
      </div>
    </div>
  );
}



Introduction
import React from 'react';
import { Card, CardContent, CardHeader, CardTitle } from '@/Components/ui/Card';
import { Button } from '@/Components/ui/Button';
import { Link } from 'react-router-dom';
import { createPageUrl } from '@/utils';
import { BookOpen, Calendar, Target, Sun, Lightbulb, Printer, Share, HelpCircle, ArrowLeft, ShoppingCart } from 'lucide-react';

export default function IntroductionPage() {
  const sections = [
    {
      icon: Calendar,
      title: 'Visão Mensal',
      description: 'Planeje seus principais projetos e eventos do mês para ter uma visão clara do que está por vir.',
    },
    {
      icon: Target,
      title: 'Planejamento Semanal',
      description: 'Defina suas intenções e prioridades para a semana, alinhando suas ações com seus propósitos.',
    },
    {
      icon: Sun,
      title: 'Página Diária',
      description: 'Comece o dia com o Ritual Matinal e termine com a Escrita Noturna para manter o foco e a gratidão.',
    },
    {
      icon: Lightbulb,
      title: 'Visão do Futuro',
      description: 'Reflita sobre seus objetivos de longo prazo e estabeleça metas claras para seu crescimento pessoal.',
    },
  ];

  const usageTips = [
    {
        icon: Share,
        title: 'Exportar para Calendário',
        description: 'Na página diária, use o ícone ao lado de cada tarefa para adicionar ao Google Agenda ou o botão "Exportar" para baixar um arquivo .ics compatível com qualquer calendário.'
    },
    {
        icon: Printer,
        title: 'Imprimir suas Páginas',
        description: 'Acesse a página "Exportar" no menu para selecionar um período e gerar uma versão para impressão de suas anotações, perfeita para guardar ou revisar.'
    }
  ];

  return (
    <div className="max-w-4xl mx-auto p-6 space-y-12">
      <div className="text-center space-y-4">
        <div className="flex justify-center mb-4">
          <div className="p-3 bg-stone-100 dark:bg-stone-700 border border-stone-200 dark:border-stone-700 rounded-xl">
            <BookOpen className="w-8 h-8 text-stone-700" />
          </div>
        </div>
        <h1 className="text-3xl md:text-4xl font-bold text-stone-900 dark:text-stone-100">
          Bem-vindo à Agenda Tempo de Ser
        </h1>
        <p className="text-stone-600 dark:text-stone-100 max-w-2xl mx-auto leading-relaxed">
          Este é o seu espaço sagrado para planejamento consciente, ação com propósito e reflexão profunda. Use esta ferramenta para se conectar com sua essência e construir a vida que você deseja.
        </p>
      </div>

      <Card className="bg-white dark:bg-stone-900 border-stone-200 dark:border-stone-700">
        <CardHeader>
          <CardTitle className="text-xl">As Seções da Sua Jornada</CardTitle>
        </CardHeader>
        <CardContent className="grid md:grid-cols-2 gap-6">
          {sections.map((section) => (
            <div key={section.title} className="flex items-start gap-4 p-4 bg-stone-50 rounded-lg">
              <section.icon className="w-8 h-8 text-stone-600 dark:text-stone-100 mt-1" />
              <div>
                <h3 className="font-semibold text-stone-800 dark:text-stone-100">{section.title}</h3>
                <p className="text-sm text-stone-600 dark:text-stone-100">{section.description}</p>
              </div>
            </div>
          ))}
        </CardContent>
      </Card>
      
       <Card className="bg-white dark:bg-stone-900 border-stone-200 dark:border-stone-700">
        <CardHeader>
          <CardTitle className="flex items-center gap-2 text-xl"><HelpCircle className="w-6 h-6" />Dicas de Uso</CardTitle>
        </CardHeader>
        <CardContent className="grid md:grid-cols-2 gap-6">
          {usageTips.map((tip) => (
            <div key={tip.title} className="flex items-start gap-4 p-4 bg-stone-50 rounded-lg">
              <tip.icon className="w-8 h-8 text-stone-600 dark:text-stone-100 mt-1" />
              <div>
                <h3 className="font-semibold text-stone-800 dark:text-stone-100">{tip.title}</h3>
                <p className="text-sm text-stone-600 dark:text-stone-100">{tip.description}</p>
              </div>
            </div>
          ))}
        </CardContent>
      </Card>

      <Card className="bg-stone-800 dark:bg-stone-100 border-stone-700">
        <CardContent className="p-6 flex flex-col md:flex-row items-center justify-between gap-6 text-left">
          <div>
            <h3 className="text-xl font-bold text-white">Leve a jornada para o papel</h3>
            <p className="text-stone-300 mt-1 max-w-lg">Adquira a versão física da agenda "Tempo de Ser" para uma experiência de escrita mais profunda e offline.</p>
          </div>
          <a href="https://www.amazon.com.br/TEMPO-DE-SER-reflex%C3%B5es-autoconhecimento/dp/B0CK27YV27" target="_blank" rel="noopener noreferrer" className="flex-shrink-0 mt-4 md:mt-0">
            <Button size="lg" className="bg-white dark:bg-stone-900 text-stone-900 dark:text-stone-100 hover:bg-stone-200 w-full md:w-auto">
              <ShoppingCart className="w-5 h-5 mr-2" />
              Comprar o Livro Físico
            </Button>
          </a>
        </CardContent>
      </Card>
      
      <div className="text-center pt-6">
          <Link to={createPageUrl("Dashboard")}>
            <Button variant="outline">
                <ArrowLeft className="w-4 h-4 mr-2" />
                Voltar para o Dashboard
            </Button>
          </Link>
      </div>

    </div>
  );
}


LoginPage
import React from 'react';
import { supabase } from '../../supabaseClient';
import { Button } from '../components/ui/button';
import { Chrome } from 'lucide-react';

export default function LoginPage() {
  const handleGoogleLogin = async () => {
    await supabase.auth.signInWithOAuth({
      provider: 'google',
    });
  };

  return (
    <div className="flex flex-col items-center justify-center min-h-screen bg-stone-50 p-6">
      <div className="flex-grow flex flex-col items-center justify-center w-full">
        {/* Container da Logo */}
        <div className="text-center mb-8">
          <img 
            src="/image.png" 
            alt="Logo Tempo de Ser" 
            className="max-w-md w-full h-auto mx-auto" // Classe chave para o tamanho da logo
          />
        </div>

        {/* Container do Botão */}
        <div className="w-full max-w-xs">
          <Button 
            onClick={handleGoogleLogin} 
            className="w-full bg-stone-800 hover:bg-stone-900 text-white rounded-lg"
            size="lg"
          >
            <Chrome className="w-5 h-5 mr-2" />
            Entrar com o Google
          </Button>
        </div>
      </div>

      {/* Rodapé */}
      <footer className="text-center py-4">
        <p className="text-sm text-stone-500">Desenvolvido pela Arkhetypo</p>
      </footer>
    </div>
  );
}




MeditationPlayer
import React, { useState, useEffect, useRef } from 'react';
import { useLocation } from 'react-router-dom';
import { Meditation } from '@/entities';
import { Button } from '@/Components/ui/Button';
import { Card, CardContent } from '@/Components/ui/Card';
import { Loader2, Play, Pause, RefreshCw, Volume2, VolumeX } from 'lucide-react';

export default function MeditationPlayerPage() {
  const location = useLocation();
  const [meditation, setMeditation] = useState(null);
  const [isLoading, setIsLoading] = useState(true);
  const [isPlaying, setIsPlaying] = useState(false);
  const [currentStep, setCurrentStep] = useState(0);
  const [isMuted, setIsMuted] = useState(false);

  const steps = useRef([]);
  const timerRef = useRef(null);
  const synth = window.speechSynthesis;
  const utteranceRef = useRef(null);

  useEffect(() => {
    const params = new URLSearchParams(location.search);
    const id = params.get('id');
    if (id) {
      const fetchMeditation = async () => {
        try {
          const med = await Meditation.get(id);
          setMeditation(med);
          steps.current = med.script.split('\\n\\n').map(s => s.trim()).filter(s => s);
        } catch (error) {
          console.error("Erro ao buscar meditação:", error);
        } finally {
          setIsLoading(false);
        }
      };
      fetchMeditation();
    }

    return () => {
        clearTimeout(timerRef.current);
        synth.cancel();
    };
  }, [location.search, synth]); // Added synth to dependencies

  useEffect(() => {
    if (isPlaying && currentStep < steps.current.length) {
      const currentText = steps.current[currentStep];
      
      // Cancel any previous speech
      synth.cancel();

      // Speak the current step
      utteranceRef.current = new SpeechSynthesisUtterance(currentText);
      utteranceRef.current.lang = 'pt-BR';
      utteranceRef.current.volume = isMuted ? 0 : 1;
      synth.speak(utteranceRef.current);

      // Estimate duration and set timer for next step
      const estimatedDuration = Math.max(currentText.length * 100, 3000); // 100ms per char, min 3s
      timerRef.current = setTimeout(() => {
        setCurrentStep(prev => prev + 1);
      }, estimatedDuration);

    } else if (currentStep >= steps.current.length && steps.current.length > 0) {
      setIsPlaying(false);
    }
  }, [isPlaying, currentStep, isMuted, synth]); // Added synth to dependencies

  const togglePlay = () => {
    if (synth.paused && isPlaying) {
        synth.resume();
    } else if (!synth.paused && isPlaying) {
        synth.pause();
    }
    setIsPlaying(!isPlaying);
  };
  
  const restart = () => {
    clearTimeout(timerRef.current);
    synth.cancel();
    setCurrentStep(0);
    setIsPlaying(true);
  };

  const toggleMute = () => {
      setIsMuted(!isMuted);
      if(utteranceRef.current) {
          utteranceRef.current.volume = !isMuted ? 0 : 1;
      }
  }

  if (isLoading) {
    return <div className="flex justify-center items-center h-[80vh]"><Loader2 className="w-8 h-8 animate-spin text-stone-500" /></div>;
  }

  if (!meditation) {
    return <div className="text-center p-8">Meditação não encontrada.</div>;
  }

  return (
    <div className="max-w-2xl mx-auto p-6 flex flex-col items-center justify-center min-h-[80vh] text-center">
      <h1 className="text-3xl font-bold text-stone-800 mb-2">{meditation.title}</h1>
      <p className="text-stone-600 mb-8">{meditation.description}</p>
      
      <Card className="w-full bg-white/80 backdrop-blur-sm shadow-xl">
        <CardContent className="p-8 md:p-12 min-h-[200px] flex items-center justify-center">
            {steps.current.length > 0 ? (
                 <p className="text-2xl text-stone-700 leading-relaxed transition-opacity duration-1000" key={currentStep}>
                    {currentStep < steps.current.length ? steps.current[currentStep] : "Sessão concluída. Respire fundo e leve essa calma com você."}
                </p>
            ) : (
                <p>Script de meditação inválido ou não encontrado.</p>
            )}
        </CardContent>
      </Card>
      
      <div className="flex items-center gap-4 mt-8">
        <Button onClick={toggleMute} variant="ghost" size="icon" className="text-stone-600 hover:bg-stone-200">
          {isMuted ? <VolumeX className="w-6 h-6" /> : <Volume2 className="w-6 h-6" />}
        </Button>
        <Button onClick={togglePlay} size="lg" className="rounded-full w-16 h-16 bg-stone-800 hover:bg-stone-900 shadow-lg">
          {isPlaying ? <Pause className="w-6 h-6" /> : <Play className="w-6 h-6" />}
        </Button>
        <Button onClick={restart} variant="ghost" size="icon" className="text-stone-600 hover:bg-stone-200">
          <RefreshCw className="w-6 h-6" />
        </Button>
      </div>
       <div className="text-xs text-stone-500 mt-4">
        Passo {Math.min(currentStep + 1, steps.current.length)} de {steps.current.length}
      </div>
      <div className="text-xs text-stone-400 mt-2">
        (Usando a síntese de voz do seu navegador)
      </div>
    </div>
  );
}



MonthlyVision
import React, { useState, useEffect, useMemo } from "react";
import toast from 'react-hot-toast';
import { Plus, Trash2, Save, Loader2, Calendar } from "lucide-react";

// --- IMPORTAÇÕES REAIS (COM CAMINHOS CORRIGIDOS) ---
import { User, MonthlyVision } from "../entities/index";
import { Button } from "../components/ui/button";
import { Card, CardContent, CardHeader, CardTitle } from "../components/ui/card";
import { Input } from "../components/ui/input";
import { Textarea } from "../components/ui/textarea";
import { Label } from "../components/ui/label";
import FormField from "../components/ui/formfield";

// Tipos para os dados
type Project = { title: string; description: string; first_steps: string; };
type Event = { title: string; preparation: string; };
type MonthlyVisionData = {
    id: string | null;
    month: string;
    user_id: string;
    major_projects: Project[];
    major_events: Event[];
    preparation_notes: string;
    best_version_notes: string;
    ideal_month_vision: string;
};

const INITIAL_STATE: MonthlyVisionData = { id: null, month: '', user_id: '', major_projects: [{ title: '', description: '', first_steps: '' }], major_events: [{ title: '', preparation: '' }], preparation_notes: '', best_version_notes: '', ideal_month_vision: '' };

export default function MonthlyVisionPage() {
  const [visionData, setVisionData] = useState<MonthlyVisionData>(INITIAL_STATE);
  const [isLoading, setIsLoading] = useState(true);
  const [isSaving, setIsSaving] = useState(false);

  const currentMonth = useMemo(() => {
    const currentDate = new Date();
    return `${currentDate.getFullYear()}-${String(currentDate.getMonth() + 1).padStart(2, '0')}`;
  }, []);

  useEffect(() => {
    const loadData = async () => {
      setIsLoading(true);
      try {
        const user = await User.me();
        if (!user) return;

        const result = await MonthlyVision.filter({ month: currentMonth, user_id: user.id });
        
        if (result && result.length > 0) {
          const loadedData = result[0] as MonthlyVisionData;
          if (!loadedData.major_projects || loadedData.major_projects.length === 0) { loadedData.major_projects = [{ title: '', description: '', first_steps: '' }]; }
          if (!loadedData.major_events || loadedData.major_events.length === 0) { loadedData.major_events = [{ title: '', preparation: '' }]; }
          setVisionData(loadedData);
        } else {
          setVisionData({ ...INITIAL_STATE, month: currentMonth, user_id: user.id });
        }
      } catch(error) {
        console.error("Erro ao carregar visão mensal:", error);
        toast.error("Não foi possível carregar os dados.");
      } finally {
        setIsLoading(false);
      }
    };
    loadData();
  }, [currentMonth]);

  const handleSave = async () => {
    setIsSaving(true);
    const toastId = toast.loading('A guardar a sua visão mensal...');
    try {
      const user = await User.me();
      if (!user) throw new Error("Utilizador não autenticado.");

      const { id, ...dataToSave } = { ...visionData, user_id: user.id, month: currentMonth };

      if (id) {
        await MonthlyVision.update(id, dataToSave);
      } else {
        const result = await MonthlyVision.create(dataToSave);
        if (result?.data?.[0]) {
          setVisionData(prev => ({...prev, id: result.data[0].id}));
        } else {
          throw new Error("Falha ao criar a visão mensal.");
        }
      }
      toast.success("Visão mensal guardada com sucesso!", { id: toastId });
    } catch (error) {
      toast.error("Ocorreu um erro ao guardar.", { id: toastId });
      console.error("Erro em handleSave:", error);
    } finally {
      setIsSaving(false);
    }
  };

  const handleDynamicChange = (key: keyof MonthlyVisionData, value: string) => setVisionData(prev => ({...prev, [key]: value}));
  
  const handleNestedChange = <T extends 'major_projects' | 'major_events'>(listName: T, index: number, field: keyof MonthlyVisionData[T][0], value: string) => {
    setVisionData(prev => {
        const updatedList = [...(prev[listName] || [])];
        updatedList[index] = { ...updatedList[index], [field]: value };
        return { ...prev, [listName]: updatedList };
    });
  };

  const addToList = (listName: 'major_projects' | 'major_events', newItem: Project | Event) => {
    setVisionData(prev => ({ ...prev, [listName]: [...(prev[listName] || []), newItem] as any }));
  };

  const removeFromList = (listName: 'major_projects' | 'major_events', index: number) => {
    if (visionData[listName].length <= 1) return;
    setVisionData(prev => ({...prev, [listName]: prev[listName].filter((_: any, i: number) => i !== index)}));
  };

  const monthNameForDisplay = new Date(`${currentMonth}-02`).toLocaleDateString('pt-BR', { month: 'long', year: 'numeric' });

  if (isLoading) return <div className="flex justify-center items-center h-[80vh]"><Loader2 className="w-8 h-8 animate-spin text-stone-500 dark:text-stone-100" /></div>;

  return (
    <div className="max-w-4xl mx-auto p-6 space-y-8">
        <div className="text-center space-y-2">
            <h1 className="text-3xl md:text-4xl font-bold text-stone-900 dark:text-stone-100 capitalize flex justify-center items-center gap-3">
                <Calendar className="w-8 h-8 text-stone-600 dark:text-amber-400"/>
                {monthNameForDisplay}
            </h1>
            <p className="text-stone-600 dark:text-stone-300">Defina a sua visão e intenções para o mês.</p>
        </div>

        <div className="space-y-8">
            <Card><CardHeader><CardTitle>Maiores Projetos</CardTitle><p className="text-sm text-stone-600 dark:text-stone-300">Quais projetos, se concluídos este mês, trariam o maior impacto?</p></CardHeader><CardContent className="space-y-6">
                {(visionData.major_projects || []).map((p, i) => (
                    <div key={i} className="p-4 bg-stone-50/80 rounded-lg border border-stone-200 dark:bg-gray-700/50 dark:border-gray-600 space-y-4">
                        <div className="flex justify-between items-center">
                            <Label>Projeto {i + 1}</Label>
                            {visionData.major_projects.length > 1 && (<Button variant="ghost" size="sm" onClick={() => removeFromList('major_projects', i)}><Trash2 className="w-4 h-4" /></Button>)}
                        </div>
                        <FormField label="Título"><Input value={p.title} onChange={e => handleNestedChange('major_projects', i, 'title', e.target.value)}/></FormField>
                        <FormField label="Descrição"><Textarea value={p.description} onChange={e => handleNestedChange('major_projects', i, 'description', e.target.value)}/></FormField>
                        <FormField label="Primeiros Passos"><Textarea value={p.first_steps} onChange={e => handleNestedChange('major_projects', i, 'first_steps', e.target.value)}/></FormField>
                    </div>
                ))}
                <Button variant="outline" onClick={() => addToList('major_projects', { title: '', description: '', first_steps: '' })} className="w-full"><Plus className="w-4 h-4 mr-2" /> Adicionar Projeto</Button>
            </CardContent></Card>
            
            <Card><CardHeader><CardTitle>Maiores Eventos</CardTitle><p className="text-sm text-stone-600 dark:text-stone-300">Quais eventos cruciais exigem a sua presença plena?</p></CardHeader><CardContent className="space-y-6">
                {(visionData.major_events || []).map((e, i) => (
                    <div key={i} className="p-4 bg-stone-50/80 rounded-lg border border-stone-200 dark:bg-gray-700/50 dark:border-gray-600 space-y-4">
                        <div className="flex justify-between items-center">
                            <Label>Evento {i + 1}</Label>
                            {visionData.major_events.length > 1 && (<Button variant="ghost" size="sm" onClick={() => removeFromList('major_events', i)}><Trash2 className="w-4 h-4" /></Button>)}
                        </div>
                        <FormField label="Evento"><Input value={e.title} onChange={ev => handleNestedChange('major_events', i, 'title', ev.target.value)}/></FormField>
                        <FormField label="Como me preparar?"><Textarea value={e.preparation} onChange={ev => handleNestedChange('major_events', i, 'preparation', ev.target.value)}/></FormField>
                    </div>
                ))}
                <Button variant="outline" onClick={() => addToList('major_events', { title: '', preparation: '' })} className="w-full"><Plus className="w-4 h-4 mr-2" /> Adicionar Evento</Button>
            </CardContent></Card>

            <div className="grid md:grid-cols-1 lg:grid-cols-3 gap-6">
                <Card><CardHeader><CardTitle className="text-base">Como me preparo?</CardTitle></CardHeader><CardContent><Textarea value={visionData.preparation_notes} onChange={e => handleDynamicChange('preparation_notes', e.target.value)} className="min-h-[120px] w-full" /></CardContent></Card>
                <Card><CardHeader><CardTitle className="text-base">Como serei o meu melhor?</CardTitle></CardHeader><CardContent><Textarea value={visionData.best_version_notes} onChange={e => handleDynamicChange('best_version_notes', e.target.value)} className="min-h-[120px] w-full" /></CardContent></Card>
                <Card><CardHeader><CardTitle className="text-base">Como seria o meu mês ideal?</CardTitle></CardHeader><CardContent><Textarea value={visionData.ideal_month_vision} onChange={e => handleDynamicChange('ideal_month_vision', e.target.value)} className="min-h-[120px] w-full" /></CardContent></Card>
            </div>
        </div>

        <div className="flex justify-center pt-6">
            <Button onClick={handleSave} disabled={isSaving || isLoading} size="lg">
                {isSaving 
                 ? <Loader2 className="w-5 h-5 mr-2 animate-spin" /> 
                 : <Save className="w-5 h-5 mr-2" />
                }
                {isSaving ? 'A guardar...' : 'Guardar Visão Mensal'}
            </Button>
        </div>
    </div>
  );
}





MorningRitual
import React, { useState, useEffect } from "react";
import { DailyPage, User } from "@/Entities";
import { Button } from "@/Components/ui/Button";
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { Textarea } from "@/Components/ui/Textarea";
import { Label } from "@/Components/ui/Label";
import { Sun, Save, ArrowLeft, Loader2 } from "lucide-react";
import { useNavigate, useSearchParams } from "react-router-dom";
import { createPageUrl } from "@/utils";
import toast from 'react-hot-toast';

export default function MorningRitualPage() {
  const navigate = useNavigate();
  const [searchParams] = useSearchParams();
  const date = searchParams.get('date');

  const [dailyEntry, setDailyEntry] = useState<any>(null);
  const [morningRitual, setMorningRitual] = useState({});
  const [isLoading, setIsLoading] = useState(true);
  const [isSaving, setIsSaving] = useState(false);

  useEffect(() => {
    const loadDailyEntry = async () => {
      if (!date) return;
      setIsLoading(true);
      try {
        const user = await User.me();
        if (!user) return;

        // Corrigido para usar user.id
        const result = await DailyPage.filter({ date, user_id: user.id });
        if (result && result.length > 0 && result[0].id) {
          setDailyEntry(result[0]);
          setMorningRitual(result[0].morning_ritual || {});
        } else {
          setDailyEntry(null); // Indica que não há registro existente
          setMorningRitual({});
        }
      } catch (error) {
        toast.error("Erro ao carregar dados.");
      } finally {
        setIsLoading(false);
      }
    };
    loadDailyEntry();
  }, [date]);

  const handleSave = async () => {
    if (!date) return;
    setIsSaving(true);
    const toastId = toast.loading("Salvando ritual matinal...");
    try {
      const user = await User.me();
      if (!user) throw new Error("Usuário não autenticado.");

      const dataToSave = { morning_ritual: morningRitual };

      if (dailyEntry && dailyEntry.id) {
        // Atualiza o registro existente
        await DailyPage.update(dailyEntry.id, dataToSave);
      } else {
        // Cria um novo registro
        const payload = {
          date: date,
          user_id: user.id, // Corrigido para usar user.id
          ...dataToSave
        };
        await DailyPage.create(payload);
      }
      toast.success("Ritual salvo com sucesso!", { id: toastId });
      navigate(createPageUrl(`DailyPage?date=${date}`));
    } catch (error) {
      toast.error("Erro ao salvar.", { id: toastId });
      console.error("Erro ao salvar Ritual Matinal:", error);
    } finally {
      setIsSaving(false);
    }
  };

  const handleInputChange = (field: string, value: string) => {
    setMorningRitual(prev => ({ ...prev, [field]: value }));
  };
  
  const morningQuestions = [
    { key: 'daily_energy', text: 'Qual é a energia que permeia meu dia hoje? Que mensagem ela traz para minha jornada?' },
    { key: 'limiting_patterns', text: 'Quais padrões de pensamento ou comportamento podem me desviar do meu caminho hoje? Como posso transformá-los em oportunidades?' },
    { key: 'conscious_choices', text: 'Que escolhas conscientes posso fazer hoje para nutrir meu bem-estar e alinhar minhas ações com meus valores?' },
    { key: 'express_gratitude', text: 'Como posso expressar amor, gratidão ou apreço a quem é importante para mim hoje?' },
    { key: 'expand_horizons', text: 'Qual pequeno passo posso dar hoje para expandir meus horizontes e abraçar o desconhecido?' },
    { key: 'plant_seeds', text: 'Quais sementes estou plantando hoje que florescerão no futuro? Como posso nutri-las com paciência e dedicação?' },
    { key: 'internal_criteria', text: 'Quais são os critérios internos que guiarão minhas ações hoje? Como posso honrar minha integridade e me orgulhar?' }
  ];

  if (isLoading) return <div className="flex justify-center items-center h-screen"><Loader2 className="w-8 h-8 animate-spin" /></div>;
  
  return (
    <div className="max-w-3xl mx-auto p-6 space-y-8">
      <div className="text-center space-y-4">
        <div className="flex justify-center mb-4">
          <div className="p-3 bg-stone-100 dark:bg-stone-700  rounded-xl border border-stone-200 dark:border-stone-700">
            <Sun className="w-6 h-6 text-stone-700 dark:text-stone-100" />
          </div>
        </div>
        <h1 className="text-2xl md:text-3xl font-bold text-stone-900 dark:text-stone-100">Ritual Matinal</h1>
        <p className="text-stone-900 dark:text-stone-100">
          7 perguntas para definir o dia, evitar auto-sabotação e sair da zona de conforto.
        </p>
      </div>

      <Card className="bg-white border-stone-200">
        <CardHeader>
          <CardTitle className="text-stone-900 dark:text-stone-100">Reflexões Matinais</CardTitle>
        </CardHeader>
        <CardContent className="space-y-6">
            {morningQuestions.map((question, index) => (
              <div key={question.key} className="flex flex-col gap-2">
                <Label htmlFor={`morning-q-${index}`} className="text-stone-900 dark:text-stone-100 font-medium">
                  {index + 1}. {question.text}
                </Label>
                <Textarea
                  id={`morning-q-${index}`}
                  value={morningRitual[question.key] || ''}
                  onChange={(e) => handleInputChange(question.key, e.target.value)}
                  placeholder="Sua reflexão..."
                  className="bg-stone-50/50 min-h-[100px]"
                />
              </div>
            ))}
        </CardContent>
      </Card>

      <div className="flex justify-between items-center pt-6">
        <Button
          variant="outline"
          onClick={() => navigate(createPageUrl(`DailyPage?date=${date}`))}
          className="bg-white"
        >
          <ArrowLeft className="w-4 h-4 mr-2" />
          Voltar para a Página Diária
        </Button>
        <Button
          onClick={handleSave}
          disabled={isSaving}
          size="lg"
          className="px-8 bg-stone-800 dark:bg-stone-100 hover:bg-stone-900 text-white dark:text-black shadow-lg"
        >
          {isSaving ? <Loader2 className="w-4 h-4 mr-2 animate-spin" /> : <Save className="w-4 h-4 mr-2" />}
          {isSaving ? 'Salvando...' : 'Salvar Ritual'}
        </Button>
      </div>
    </div>
  );
}


Profile

import React, { useState, useEffect } from "react";
import toast from 'react-hot-toast';
import { User, DailyPage, MonthlyVision, WeeklyPlanning } from "../entities";
import { Button } from "../components/ui/button";
import { Card, CardContent, CardHeader, CardTitle } from "../components/ui/card";
import { Input } from "../components/ui/input";
import { Textarea } from "../components/ui/textarea";
import { Save, LogOut, Award, Loader2, Flame } from "lucide-react";
import FormField from "../components/ui/FormField";
import Calendar from 'react-calendar';
import 'react-calendar/dist/Calendar.css';
import { calculateStreak } from "../utils/stats";
import { useNavigate } from "react-router-dom";

export default function ProfilePage() {
  const navigate = useNavigate();
  const [userProfile, setUserProfile] = useState<any>(null);
  const [profileData, setProfileData] = useState({ bio: '', goals: '', values: '', inspiration: '' });
  const [stats, setStats] = useState({ dailyPages: 0, weeklyPlannings: 0, monthlyVisions: 0 });
  const [filledDays, setFilledDays] = useState<Set<string>>(new Set());
  const [streak, setStreak] = useState(0);
  const [isLoading, setIsLoading] = useState(true);
  const [isSaving, setIsSaving] = useState(false);

  // CORREÇÃO: Lógica de carregamento movida para uma função reutilizável.
  const loadProfile = async () => {
    setIsLoading(true);
    try {
      const user = await User.me();
      if (!user) { setIsLoading(false); return; }

      setUserProfile(user);
      const metadata = user.user_metadata || {};
      setProfileData({
        bio: metadata.bio || '',
        goals: metadata.goals || '',
        values: metadata.values || '',
        inspiration: metadata.inspiration || '',
      });

      const [dailyPages, weeklyPlannings, monthlyVisions] = await Promise.all([
        DailyPage.filter({ user_id: user.id }),
        WeeklyPlanning.filter({ user_id: user.id }),
        MonthlyVision.filter({ user_id: user.id }),
      ]);
      
      const validDaily = dailyPages.filter((p: any) => p.id);
      const validWeekly = weeklyPlannings.filter((p: any) => p.id);
      const validMonthly = monthlyVisions.filter((p: any) => p.id);

      setStats({
          dailyPages: validDaily.length,
          weeklyPlannings: validWeekly.length,
          monthlyVisions: validMonthly.length,
      });

      const dates = validDaily.map((page: any) => page.date.split('T')[0]);
      setFilledDays(new Set(dates));
      setStreak(calculateStreak(dates));

    } catch (error) {
      toast.error("Não foi possível carregar o perfil.");
      console.error("Erro ao carregar perfil:", error);
    } finally {
      setIsLoading(false);
    }
  };

  useEffect(() => {
    loadProfile();
  }, []);

  const handleSave = async () => {
    setIsSaving(true);
    const toastId = toast.loading('A guardar perfil...');
    try {
      await User.updateMyUserData(profileData);
      toast.success('Perfil salvo com sucesso!', { id: toastId });
      // CORREÇÃO: Recarrega os dados para atualizar a UI imediatamente.
      await loadProfile();
    } catch (error) {
      toast.error("Erro ao salvar o perfil.", { id: toastId });
      console.error("Erro ao salvar:", error);
    } finally {
      setIsSaving(false);
    }
  };

  const handleLogout = async () => {
    const toastId = toast.loading('A terminar sessão...');
    try {
        await User.logout();
        toast.success('Sessão terminada!', { id: toastId });
        navigate('/login');
    } catch (error) {
        toast.error('Erro ao terminar sessão.', { id: toastId });
    }
  };
  
  const getTileClassName = ({ date, view }: { date: Date, view: string }) => {
    if (view === 'month') {
      const dateString = date.toISOString().split('T')[0];
      if (filledDays.has(dateString)) {
        return 'highlight-day';
      }
    }
    return '';
  };

  if (isLoading) {
    return <div className="flex justify-center items-center h-[80vh]"><Loader2 className="w-8 h-8 animate-spin text-stone-500 dark:text-stone-100" /></div>;
  }

  return (
    <div className="max-w-4xl mx-auto p-6 space-y-8">
      <div className="text-center">
        <h1 className="text-3xl font-bold text-stone-900 dark:text-stone-100">Meu Perfil</h1>
        <p className="text-stone-600 dark:text-stone-100 mt-2">Gerencie as suas informações e veja o seu progresso na jornada.</p>
      </div>
      <div className="grid grid-cols-1 md:grid-cols-2 gap-8">
        <div className="space-y-6">
          <Card className="bg-white dark:bg-black">
            <CardHeader><CardTitle>Informações Básicas</CardTitle></CardHeader>
            <CardContent className="space-y-4">
              <FormField label="Nome Completo" htmlFor="full_name">
                <Input id="full_name" value={userProfile?.user_metadata?.full_name || 'Visitante'} disabled className="bg-stone-100 dark:bg-stone-900 cursor-not-allowed" />
              </FormField>
              <FormField label="Email" htmlFor="email">
                <Input id="email" value={userProfile?.email || ''} disabled className="bg-stone-100 dark:bg-stone-900 cursor-not-allowed" />
              </FormField>
            </CardContent>
          </Card>
          <Card className="bg-white dark:bg-black">
            <CardHeader><CardTitle>Sobre Você</CardTitle></CardHeader>
            <CardContent className="space-y-4">
              <FormField label="Biografia Pessoal" htmlFor="bio">
                <Textarea id="bio" value={profileData.bio} onChange={(e) => setProfileData({ ...profileData, bio: e.target.value })} placeholder="Conte um pouco sobre você..." className="min-h-[120px]" />
              </FormField>
              <FormField label="Principais Objetivos" htmlFor="goals">
                <Textarea id="goals" value={profileData.goals} onChange={(e) => setProfileData({ ...profileData, goals: e.target.value })} placeholder="Quais são seus principais objetivos de vida?" className="min-h-[100px]" />
              </FormField>
              <FormField label="Valores Fundamentais" htmlFor="values">
                <Textarea id="values" value={profileData.values} onChange={(e) => setProfileData({ ...profileData, values: e.target.value })} placeholder="Quais valores guiam as suas decisões?" className="min-h-[100px]" />
              </FormField>
              <FormField label="O que te Inspira" htmlFor="inspiration">
                <Textarea id="inspiration" value={profileData.inspiration} onChange={(e) => setProfileData({ ...profileData, inspiration: e.target.value })} placeholder="Pessoas, livros, ideias que te inspiram..." className="min-h-[100px]" />
              </FormField>
            </CardContent>
          </Card>
        </div>
        <div className="space-y-6">
          <Card className="bg-white dark:bg-black">
            <CardHeader>
              <CardTitle className="flex items-center gap-2"><Award className="w-5 h-5" />Seu Progresso</CardTitle>
            </CardHeader>
            <CardContent className="space-y-4 text-sm">
              <div className="flex justify-between items-center font-medium">
                <span className="text-stone-600 dark:text-stone-100 flex items-center gap-2">
                  <Flame className="w-4 h-4 text-amber-500" />
                  Sequência Atual
                </span>
                <span className="font-bold text-lg text-amber-600">{streak} {streak === 1 ? 'dia' : 'dias'}</span>
              </div>
              <div className="border-t pt-4 space-y-3">
                <div className="flex justify-between items-center text-stone-600 dark:text-stone-100">
                  <span>Páginas Diárias Preenchidas</span>
                  <span className="font-bold text-stone-800 dark:text-stone-100">{stats.dailyPages}</span>
               </div>
                <div className="flex justify-between items-center text-stone-600 dark:text-stone-100">
                  <span>Planejamentos Semanais</span>
                  <span className="font-bold text-stone-800 dark:text-stone-100">{stats.weeklyPlannings}</span>
                </div>
                <div className="flex justify-between items-center text-stone-600 dark:text-stone-100">
                  <span>Visões Mensais</span>
                  <span className="font-bold text-stone-800 dark:text-stone-100">{stats.monthlyVisions}</span>
                </div>
              </div>
            </CardContent>
          </Card>
          <Card className="bg-white dark:bg-black">
            <CardHeader>
              <CardTitle className="flex items-center gap-2">Sua Jornada Visual</CardTitle>
            </CardHeader>
            <CardContent>
              <Calendar tileClassName={getTileClassName} className="w-full" locale="pt-BR" />
            </CardContent>
          </Card>
          <div className="space-y-2">
            <Button onClick={handleSave} disabled={isSaving} size="lg" className="w-full">
              {isSaving ? <Loader2 className="w-4 h-4 mr-2 animate-spin" /> : <Save className="w-4 h-4 mr-2" />}
              {isSaving ? 'A guardar...' : 'Salvar Perfil'}
            </Button>
            <Button onClick={handleLogout} variant="outline" className="w-full">
              <LogOut className="w-4 h-4 mr-2" />
              Sair da Conta
            </Button>
          </div>
        </div>
      </div>
    </div>
  );
}

WeeklyPlanning

import React, { useState, useEffect } from "react";
import toast from 'react-hot-toast';
import { WeeklyPlanning, User, MonthlyVision } from "@/Entities";
import { Button } from "@/Components/ui/Button";
import { Card, CardContent, CardHeader, CardTitle } from "@/Components/ui/Card";
import { Textarea } from "@/Components/ui/Textarea";
import { Input } from "@/Components/ui/Input";
import { Save, ChevronLeft, ChevronRight, Pin, Loader2 } from "lucide-react";

// Estado inicial para garantir que todos os campos existam
const INITIAL_STATE = {
  week_start_date: '',
  user_id: '',
  week_calendar: { text: '' },
  purpose_aligned_action: '',
  crucial_interactions: '',
  self_care_act: '',
  inspiring_people: '',
  three_pillars: '',
  insights_reflections: '',
};

export default function WeeklyPlanningPage() {
  const [weekStartDate, setWeekStartDate] = useState(() => {
    const today = new Date();
    const day = today.getDay();
    const diff = today.getDate() - day + (day === 0 ? -6 : 1);
    return new Date(today.setDate(diff)).toISOString().split('T')[0];
  });

  const [weeklyData, setWeeklyData] = useState<any>(INITIAL_STATE);
  const [monthlyVision, setMonthlyVision] = useState<any>(null);
  const [isLoading, setIsLoading] = useState(true);
  const [isSaving, setIsSaving] = useState(false);

  useEffect(() => {
    const loadData = async () => {
      setIsLoading(true);
      try {
        const user = await User.me();
        if (!user) return; // Se não houver usuário, não faz nada

        const currentMonth = weekStartDate.slice(0, 7);

        // --- CORREÇÃO 1: Usar user.id em vez de user.email ---
        const [weeklyResult, monthlyResult] = await Promise.all([
          WeeklyPlanning.filter({ week_start_date: weekStartDate, user_id: user.id }),
          MonthlyVision.filter({ month: currentMonth, user_id: user.id })
        ]);

        if (weeklyResult && weeklyResult.length > 0 && weeklyResult[0].id) {
          // Garante que o estado inicial e os dados carregados sejam mesclados
          setWeeklyData({ ...INITIAL_STATE, ...weeklyResult[0] });
        } else {
          setWeeklyData({ ...INITIAL_STATE, week_start_date: weekStartDate, user_id: user.id });
        }

        setMonthlyVision(monthlyResult && monthlyResult.length > 0 ? monthlyResult[0] : null);

      } catch (error) {
        console.error("Erro ao carregar dados:", error);
        toast.error("Não foi possível carregar os dados.");
      } finally {
        setIsLoading(false);
      }
    };
    loadData();
  }, [weekStartDate]);

  // --- CORREÇÃO 2: Lógica de salvar robusta ---
  const handleSave = async () => {
    setIsSaving(true);
    const toastId = toast.loading('Salvando planejamento...');
    try {
      const user = await User.me();
      if (!user) {
        toast.error("Sessão expirada.", { id: toastId });
        setIsSaving(false);
        return;
      }

      // Garante que created_by seja sempre o ID do usuário
      const dataToSave = { ...weeklyData, user_id: user.id, week_start_date: weekStartDate };

      if (dataToSave.id) {
        // Se já existe um ID, atualiza
        await WeeklyPlanning.update(dataToSave.id, dataToSave);
      } else {
        // Se não, cria um novo
        const { data: createdData, error } = await WeeklyPlanning.create(dataToSave);
        if (error || !createdData || createdData.length === 0) {
            throw new Error("Falha ao criar o planejamento semanal.");
        }
        // Atualiza o estado com os dados retornados, incluindo o novo ID
        setWeeklyData(createdData[0]);
      }
      toast.success('Planejamento salvo!', { id: toastId });
    } catch (error) {
      console.error("Erro ao salvar planejamento semanal:", error);
      toast.error("Erro ao salvar.", { id: toastId });
    } finally {
      setIsSaving(false);
    }
  };

  const navigateWeek = (direction: number) => {
    const date = new Date(weekStartDate);
    date.setDate(date.getDate() + (direction * 7));
    setWeekStartDate(date.toISOString().split('T')[0]);
  };

  const getWeekRange = () => {
    const start = new Date(weekStartDate + 'T00:00:00');
    const end = new Date(start);
    end.setDate(start.getDate() + 6);
    return {
      start: start.toLocaleDateString('pt-BR', { day: 'numeric', month: 'short' }),
      end: end.toLocaleDateString('pt-BR', { day: 'numeric', month: 'short', year: 'numeric' })
    };
  };

  const weekRange = getWeekRange();

  const reflectionQuestions = [
    { key: 'purpose_aligned_action', title: 'Ação Alinhada com Propósito', question: 'Qual é a ação mais alinhada com meu propósito hoje, que, se realizada, fará uma diferença significativa?' },
    { key: 'crucial_interactions', title: 'Interações Cruciais', question: 'Quais interações são cruciais hoje para construir relacionamentos autênticos e colaborativos?' },
    { key: 'self_care_act', title: 'Ato de Autocuidado', question: 'Qual é o ato de autocuidado que nutrirá meu corpo, mente e espírito hoje?' },
    { key: 'inspiring_people', title: 'Pessoas Inspiradoras', question: 'Quem são as pessoas que me inspiram, me apoiam e me desafiam a crescer?' },
    { key: 'three_pillars', title: 'Três Pilares do Mês', question: 'Quais são os 3 pilares que sustentarão meu mês, alinhado com meus valores e propósito?' },
    { key: 'insights_reflections', title: 'Insights e Reflexões', question: 'Espaço para insights, intuições e reflexões que emergem ao longo da semana.' }
  ];

  if (isLoading) {
    return <div className="flex justify-center items-center h-[80vh]"><Loader2 className="w-8 h-8 animate-spin text-stone-500 dark:text-stone-100" /></div>;
  }

  return (
    <div className="max-w-4xl mx-auto p-6 space-y-8">
      <div className="text-center space-y-4">
        <div className="flex justify-center items-center gap-4">
          <Button variant="outline" size="icon" onClick={() => navigateWeek(-1)} className="rounded-full bg-white/50 "><ChevronLeft className="w-4 h-4" /></Button>
          <h1 className="text-2xl md:text-3xl font-bold text-stone-900 dark:text-stone-100">
            Semana de {weekRange.start} a {weekRange.end}
          </h1>
          <Button variant="outline" size="icon" onClick={() => navigateWeek(1)} className="rounded-full bg-white/50 "><ChevronRight className="w-4 h-4" /></Button>
        </div>
        <div className="flex justify-center">
          <Input type="date" value={weekStartDate} onChange={(e) => setWeekStartDate(e.target.value)} className="w-fit bg-white/80 " />
        </div>
      </div>

      <Card className="bg-white  border-stone-200 dark:border-stone-900">
        <CardHeader>
          <CardTitle className="text-stone-900 dark:text-stone-100">Eventos da Semana</CardTitle>
          <p className="text-sm text-stone-600 dark:text-stone-100">
            Anote os principais eventos, atividades e projetos da semana para ter clareza.
          </p>
        </CardHeader>
        <CardContent>
          <Textarea
            value={weeklyData.week_calendar?.text ?? ''}
            onChange={(e) => setWeeklyData({ ...weeklyData, week_calendar: { text: e.target.value } })}
            placeholder="Segunda: Reunião com equipe às 14h&#10;Terça: Dentista às 16h&#10;Quarta: Jantar com amigos..."
            className="min-h-[120px] bg-stone-50/50  font-sans w-full"
          />
        </CardContent>
      </Card>

      <div className="space-y-6">
        {reflectionQuestions.map((item) => (
          <Card key={item.key} className="bg-white  border-stone-200">
            <CardContent className="p-6 flex flex-col gap-2">
              <h4 className="text-stone-900 dark:text-stone-100 text-lg font-semibold">{item.title}</h4>
              <p className="text-sm text-stone-600 dark:text-stone-100">{item.question}</p>
              <Textarea
                id={item.key}
                value={weeklyData[item.key] || ''}
                onChange={(e) => setWeeklyData({ ...weeklyData, [item.key]: e.target.value })}
                placeholder="Sua reflexão..."
                className="min-h-[120px] bg-stone-50/50  w-full"
              />
            </CardContent>
          </Card>
        ))}
      </div>

      <div className="flex justify-center pt-6">
        <Button onClick={handleSave} disabled={isSaving} size="lg" className="px-8 py-3 bg-stone-800 dark:bg-stone-100 hover:bg-stone-900 text-white dark:text-black shadow-lg w-72">
          {isSaving ? <Loader2 className="w-4 h-4 mr-2 animate-spin" /> : <Save className="w-4 h-4 mr-2" />}
          {isSaving ? 'Salvando...' : 'Salvar Planejamento Semanal'}
        </Button>
      </div>
    </div>
  );
}


na pasta srt:

main.tsx

// src/main.tsx (Corrigido e Simplificado)
import { ThemeProvider } from '@/contexts/ThemeContext'; 
import React, { useState, useEffect, ReactNode } from 'react';
import ReactDOM from 'react-dom/client';
import { BrowserRouter, Routes, Route, Navigate } from 'react-router-dom';
import { Toaster } from 'react-hot-toast';
import { Session } from '@supabase/supabase-js';
import { Loader2 } from 'lucide-react';

// --- IMPORTAÇÕES CORRIGIDAS ---
import { supabase } from '@/supabaseClient'; // Usando alias @/
import '@/index.css'; // Usando alias @/
import Layout from '@/Layout'; // Usando alias @/

// Importando páginas com caminhos padronizados
import LoginPage from '@/pages/LoginPage';
import Dashboard from '@/pages/Dashboard';
import MonthlyVisionPage from '@/pages/MonthlyVision';
import WeeklyPlanningPage from '@/pages/WeeklyPlanning';
import DailyPageComponent from '@/pages/DailyPage';
import FutureVisionPage from '@/pages/FutureVision';
import MorningRitualPage from '@/pages/MorningRitual';
import EveningReflectionPage from '@/pages/EveningReflection';
import ExportPage from '@/pages/Export';
import ProfilePage from '@/pages/Profile';
import IntroductionPage from '@/pages/Introduction';
// import MeditationsPage from '@/pages/Meditations'; // CORREÇÃO: Comentado pois o arquivo não foi fornecido
import MeditationPlayerPage from '@/pages/MeditationPlayer';
import AccessDeniedPage from '@/pages/AccessDeniedPage';

// Componente para proteger rotas
const ProtectedRoute = ({ children }: { children: ReactNode }) => {
  const [session, setSession] = useState<Session | null>(null);
  const [isAllowed, setIsAllowed] = useState(false);
  const [loading, setLoading] = useState(true);

  useEffect(() => {
    const checkUserStatus = async (currentSession: Session | null) => {
      if (currentSession?.user?.email) {
        const { data: allowedUser } = await supabase
          .from('allowed_users')
          .select('email')
          .eq('email', currentSession.user.email)
          .single();
        setIsAllowed(!!allowedUser);
      } else {
        setIsAllowed(false);
      }
      setLoading(false);
    };

    supabase.auth.getSession().then(({ data: { session } }) => {
      setSession(session);
      checkUserStatus(session);
    });

    const { data: { subscription } } = supabase.auth.onAuthStateChange((_event, session) => {
      setSession(session);
      setLoading(true);
      checkUserStatus(session);
    });

    return () => subscription.unsubscribe();
  }, []);

  if (loading) {
    return <div className="flex items-center justify-center min-h-screen"><Loader2 className="w-8 h-8 animate-spin"/></div>;
  }

  if (!session) {
    return <Navigate to="/login" replace />;
  }
  
  if (!isAllowed) {
    return <Navigate to="/access-denied" replace />;
  }

  return <>{children}</>;
};

// Componente para envolver páginas com o Layout principal
const AppLayout = ({ children }: { children: React.ReactElement }) => {
  const pageName = children.type.name.replace('Page', '').replace('Component', '');
  return <Layout currentPageName={pageName}>{children}</Layout>;
};

// Roteador principal da aplicação
function App() {
  return (
    <BrowserRouter>
      <Routes>
        {/* Rotas Públicas */}
        <Route path="/login" element={<LoginPage />} />
        <Route path="/access-denied" element={<AccessDeniedPage />} />
        
        {/* Rotas Protegidas */}
        <Route path="/*" element={
          <ProtectedRoute>
            <Routes>
              <Route path="/dashboard" element={<AppLayout><Dashboard /></AppLayout>} />
              <Route path="/monthlyVision" element={<AppLayout><MonthlyVisionPage /></AppLayout>} />
              <Route path="/weeklyPlanning" element={<AppLayout><WeeklyPlanningPage /></AppLayout>} />
              <Route path="/dailyPage" element={<AppLayout><DailyPageComponent /></AppLayout>} />
              <Route path="/futureVision" element={<AppLayout><FutureVisionPage /></AppLayout>} />
              <Route path="/morningRitual" element={<AppLayout><MorningRitualPage /></AppLayout>} />
              <Route path="/eveningReflection" element={<AppLayout><EveningReflectionPage /></AppLayout>} />
              <Route path="/export" element={<AppLayout><ExportPage /></AppLayout>} />
              <Route path="/profile" element={<AppLayout><ProfilePage /></AppLayout>} />
              <Route path="/introduction" element={<AppLayout><IntroductionPage /></AppLayout>} />
              {/* <Route path="/meditations" element={<AppLayout><MeditationsPage /></AppLayout>} /> */}
              <Route path="/meditationPlayer" element={<AppLayout><MeditationPlayerPage /></AppLayout>} />
              
              {/* Rota padrão para redirecionar ao dashboard */}
              <Route path="*" element={<Navigate to="/dashboard" replace />} />
            </Routes>
          </ProtectedRoute>
        }/>
      </Routes>
    </BrowserRouter>
  );
}

ReactDOM.createRoot(document.getElementById('root')!).render(
  <React.StrictMode>
    <ThemeProvider>
      <Toaster position="top-right" />
      <App />
    </ThemeProvider>
  </React.StrictMode>
);


Layout
// src/Layout.tsx

import React from "react";
import { Link } from "react-router-dom";
import { createPageUrl } from "@/utils";
import { 
    BookOpen, 
    Calendar, 
    Target, 
    Sun, 
    Lightbulb, 
    Printer, 
    User as UserIcon, 
    Info, 
    BrainCircuit, 
    Moon, 
    SunDim
} from "lucide-react";
import { useTheme } from "./contexts/ThemeContext";

export default function Layout({ children, currentPageName }: { children: React.ReactNode, currentPageName: string }) {
  // A linha abaixo USA o 'useTheme'. O aviso desaparecerá.
  const { theme, toggleTheme } = useTheme();

  const navigationItems = [
    { title: "Dashboard", url: createPageUrl("Dashboard"), icon: BookOpen },
    { title: "Visão Mensal", url: createPageUrl("MonthlyVision"), icon: Calendar },
    { title: "Planejamento Semanal", url: createPageUrl("WeeklyPlanning"), icon: Target },
    { title: "Página Diária", url: createPageUrl("DailyPage"), icon: Sun },
    { title: "Meditações", url: createPageUrl("Meditations"), icon: BrainCircuit },
    { title: "Visão do Futuro", url: createPageUrl("FutureVision"), icon: Lightbulb },
    { title: "Exportar", url: createPageUrl("Export"), icon: Printer }
  ];

  return (
    <div className="min-h-screen bg-stone-50 text-stone-800 flex flex-col dark:bg-gray-900 dark:text-stone-200 transition-colors duration-300">
      <header className="bg-white/80 backdrop-blur-sm border-b border-stone-200 sticky top-0 z-50 dark:bg-gray-800/80 dark:border-gray-700">
        <div className="max-w-7xl mx-auto px-6 py-4 flex items-center justify-between">
          <Link to={createPageUrl("Dashboard")} title="Ir para o Dashboard">
            <img src="/image.png" alt="Logo Tempo de Ser" className="h-16 w-auto" />
          </Link>
          <nav className="flex items-center gap-1">
            {navigationItems.map((item) => (
              <Link key={item.title} to={item.url} title={item.title} className="flex items-center justify-center h-10 w-10 rounded-lg transition-colors text-stone-600 hover:bg-stone-100 dark:text-stone-300 dark:hover:bg-gray-700">
                <item.icon className="w-5 h-5" />
              </Link>
            ))}
            <div className="w-px h-6 bg-stone-200 dark:bg-gray-600 mx-2"></div>
            <Link to={createPageUrl("Introduction")} title="Introdução" className="flex items-center justify-center h-10 w-10 rounded-lg text-stone-600 hover:bg-stone-100 dark:text-stone-300 dark:hover:bg-gray-700"><Info className="w-5 h-5" /></Link>
            <Link to={createPageUrl("Profile")} title="Meu Perfil" className="flex items-center justify-center h-10 w-10 rounded-lg text-stone-600 hover:bg-stone-100 dark:text-stone-300 dark:hover:bg-gray-700"><UserIcon className="w-5 h-5" /></Link>
            
            {/* Este botão USA 'toggleTheme' e 'theme'. */}
            <button 
              onClick={toggleTheme} 
              title="Alterar Tema" 
              className="flex items-center justify-center h-10 w-10 rounded-lg text-stone-600 hover:bg-stone-100 dark:text-amber-400 dark:hover:bg-gray-700"
            >
              {theme === 'light' ? <Moon className="w-5 h-5" /> : <SunDim className="w-5 h-5" />}
            </button>
          </nav>
        </div>
      </header>
      
      <main className="flex-grow">
        {children}
      </main>

      <footer className="bg-stone-800 text-stone-300 py-12 dark:bg-gray-950">
        {/* ... (rodapé) ... */}
      </footer>
    </div>
  );
}

supabaseClient



import { createClient } from '@supabase/supabase-js'

// Pega as chaves do seu arquivo .env.local
const supabaseUrl = import.meta.env.VITE_SUPABASE_URL
const supabaseAnonKey = import.meta.env.VITE_SUPABASE_ANON_KEY

// Cria e EXPORTA o cliente Supabase. A palavra "export" aqui é a chave.
export const supabase = createClient(supabaseUrl, supabaseAnonKey)